# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rzI8XvKbyFNzccFimBTA1iTbxzz6HBb9
"""

import pandas as pd

# Cargar el archivo que subiste a Colab
file_path = '/content/1083 productos al 24 de sep.xlsx'  # Asegurate de que el archivo esté aquí o usá el explorador de archivos para subirlo

# Cargar el archivo en un DataFrame de pandas
df = pd.read_excel(file_path)

# Mostrar las primeras filas para ver la estructura
df.head()

# Corregir la asignación de la ruta
file_path = '/content/1083 productos al 24 de sep.xlsx'

# Leer el archivo usando pandas
df = pd.read_excel(file_path)

# Mostrar las primeras filas del archivo para verificar que se cargó correctamente
df.head()

from IPython.display import display, HTML

# Función para mostrar un producto con formato visual mejorado y manejar la ausencia de datos
def mostrar_producto_formato_completo(producto):
    # Determinar color del stock
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"

    # Verificar si 'Inner Forzado' está presente, de lo contrario mostrar 'Sin datos'
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Inner forzado por {inner_forzado}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Verificar la existencia de la fecha de vencimiento
    from datetime import datetime, timedelta
    fecha_actual = datetime.now()
    fecha_vencimiento = pd.to_datetime(producto.get('Fecha Vencimiento', 'Sin datos'), errors='coerce')

    if pd.notna(fecha_vencimiento) and fecha_vencimiento < fecha_actual + timedelta(days=60):
        vencimiento_color = "red"
        fecha_vencimiento_texto = fecha_vencimiento.strftime('%Y-%m-%d')
    else:
        vencimiento_color = "green"
        fecha_vencimiento_texto = "Sin datos" if pd.isna(fecha_vencimiento) else fecha_vencimiento.strftime('%Y-%m-%d')

    # Crear contenido HTML
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px; width: 100%; font-family: Arial, sans-serif; background-color: #f9f9f9;">
        <h2 style="color: #333;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; float:right; margin-left:10px;" alt="Imagen del producto">

        <p><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p><strong>Precio:</strong> {producto.get('Precio', 'Sin datos')}</p>
        <p><strong>Precio Mayorista:</strong> {producto.get('Precio Mayorista', 'Sin datos')}</p>
        <p><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
        <p><strong>Inner Forzado:</strong> <span style="color: {inner_forzado_color};">{inner_forzado_texto}</span></p>
        <p><strong>Stock:</strong> <span style="color: {stock_color};">{producto.get('Stock', 'Sin datos')}</span></p>
        <p><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p><strong>Fecha de Vencimiento:</strong> <span style="color: {vencimiento_color};">{fecha_vencimiento_texto}</span></p>
        <p><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        <p><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
    </div>
    <div style="clear:both;"></div>
    """

    display(HTML(html_content))

# Buscar producto por nombre
producto_buscar = input("Ingresá el nombre del producto que querés buscar: ")
resultado_busqueda = df[df['Nombre'].str.contains(producto_buscar, case=False, na=False)]

# Verificar si hay resultados
if not resultado_busqueda.empty:
    # Si hay más de un resultado, mostrar los productos con el formato
    for i, producto in resultado_busqueda.iterrows():
        mostrar_producto_formato_completo(producto)
else:
    print("No se encontraron productos con ese nombre.")

!pip install ipywidgets

import ipywidgets as widgets
from IPython.display import display, clear_output

# Función para mostrar el producto seleccionado
def mostrar_producto_formato_completo(producto):
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Inner forzado por {inner_forzado}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px; width: 100%; font-family: Arial, sans-serif; background-color: #f9f9f9;">
        <h2 style="color: #333;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; float:right; margin-left:10px;" alt="Imagen del producto">
        <p><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p><strong>Precio:</strong> {producto.get('Precio', 'Sin datos')}</p>
        <p><strong>Precio Mayorista:</strong> {producto.get('Precio Mayorista', 'Sin datos')}</p>
        <p><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
        <p><strong>Inner Forzado:</strong> <span style="color: {inner_forzado_color};">{inner_forzado_texto}</span></p>
        <p><strong>Stock:</strong> <span style="color: {stock_color};">{producto.get('Stock', 'Sin datos')}</span></p>
        <p><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        <p><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
    </div>
    <div style="clear:both;"></div>
    """
    display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
    if not coincidencias.empty:
        # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

        desplegable = widgets.Dropdown(
            options=opciones,
            description='Seleccionar:',
        )
        display(desplegable)

        # Conectar el dropdown para mostrar el producto cuando se seleccione
        def mostrar_producto_cuando_selecciona(change):
            clear_output(wait=True)
            mostrar_producto_formato_completo(desplegable.value)

        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
    else:
        print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda interactivo
entrada_busqueda = widgets.Text(
    value='',
    placeholder='Ingresá el nombre del producto',
    description='Buscar:',
    disabled=False
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

display(entrada_busqueda)

import ipywidgets as widgets
from IPython.display import display, clear_output

# Función para mostrar el producto seleccionado
def mostrar_producto_formato_completo(producto):
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Inner forzado por {inner_forzado}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px; width: 100%; font-family: Arial, sans-serif; background-color: #f9f9f9;">
        <h2 style="color: #333;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; float:right; margin-left:10px;" alt="Imagen del producto">
        <p><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p><strong>Precio:</strong> {producto.get('Precio', 'Sin datos')}</p>
        <p><strong>Precio Mayorista:</strong> {producto.get('Precio Mayorista', 'Sin datos')}</p>
        <p><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
        <p><strong>Inner Forzado:</strong> <span style="color: {inner_forzado_color};">{inner_forzado_texto}</span></p>
        <p><strong>Stock:</strong> <span style="color: {stock_color};">{producto.get('Stock', 'Sin datos')}</span></p>
        <p><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        <p><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
    </div>
    <div style="clear:both;"></div>
    """
    display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
    if not coincidencias.empty:
        # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

        desplegable = widgets.Dropdown(
            options=opciones,
            description='Seleccionar:',
        )
        display(desplegable)

        # Conectar el dropdown para mostrar el producto cuando se seleccione
        def mostrar_producto_cuando_selecciona(change):
            clear_output(wait=True)
            mostrar_producto_formato_completo(desplegable.value)

        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
    else:
        print("No se encontraron productos con ese nombre.")

# Función para borrar la búsqueda y restablecer todo
def borrar_busqueda(b):
    clear_output(wait=True)  # Limpiar la salida anterior
    entrada_busqueda.value = ''  # Limpiar el texto de búsqueda
    display(entrada_busqueda, boton_borrar)  # Mostrar nuevamente el cuadro de búsqueda y el botón de borrar

# Cuadro de búsqueda interactivo
entrada_busqueda = widgets.Text(
    value='',
    placeholder='Ingresá el nombre del producto',
    description='Buscar:',
    disabled=False
)

# Botón de borrar
boton_borrar = widgets.Button(
    description="Borrar búsqueda",
    button_style='danger'
)
boton_borrar.on_click(borrar_busqueda)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda y botón de borrar
display(entrada_busqueda, boton_borrar)

import ipywidgets as widgets
from IPython.display import display, HTML, clear_output

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Inner forzado por {inner_forzado}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML mejorado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px; width: 100%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px;">
        <h2 style="color: #333; text-align: left;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; float:right; margin-left:10px; border-radius: 8px;" alt="Imagen del producto">
        <p style="font-size: 16px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio:</strong> {producto.get('Precio', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> {producto.get('Precio Mayorista', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Inner Forzado:</strong> <span style="color: {inner_forzado_color};">{inner_forzado_texto}</span></p>
        <p style="font-size: 16px;"><strong>Stock:</strong> <span style="color: {stock_color};">{producto.get('Stock', 'Sin datos')}</span></p>
        <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
    </div>
    <div style="clear:both;"></div>
    """
    display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
    if not coincidencias.empty:
        # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

        desplegable = widgets.Dropdown(
            options=opciones,
            description='Seleccionar:',
            style={'description_width': 'initial'},  # Ajustar el ancho de la descripción
            layout=widgets.Layout(width='50%')  # Ajustar el tamaño del Dropdown
        )
        display(desplegable)

        # Conectar el dropdown para mostrar el producto cuando se seleccione
        def mostrar_producto_cuando_selecciona(change):
            clear_output(wait=True)
            display(entrada_busqueda, boton_borrar)
            mostrar_producto_formato_completo(desplegable.value)

        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
    else:
        print("No se encontraron productos con ese nombre.")

# Función para borrar la búsqueda y restablecer todo
def borrar_busqueda(b):
    clear_output(wait=True)  # Limpiar la salida anterior
    entrada_busqueda.value = ''  # Limpiar el texto de búsqueda
    display(entrada_busqueda, boton_borrar)  # Mostrar nuevamente el cuadro de búsqueda y el botón de borrar

# Cuadro de búsqueda interactivo
entrada_busqueda = widgets.Text(
    value='',
    placeholder='Ingresá el nombre del producto',
    description='Buscar:',
    layout=widgets.Layout(width='50%'),  # Ajustar el tamaño del cuadro de búsqueda
    style={'description_width': 'initial'}  # Ajustar el ancho de la descripción
)

# Botón de borrar
boton_borrar = widgets.Button(
    description="Borrar búsqueda",
    button_style='danger',
    layout=widgets.Layout(width='30%')  # Ajustar el tamaño del botón
)

boton_borrar.on_click(borrar_busqueda)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda y botón de borrar
display(entrada_busqueda, boton_borrar)

import ipywidgets as widgets
from IPython.display import display, HTML, clear_output, Image
import pyperclip  # Esto es para copiar al portapapeles, pero podría requerir instalación

# Función para copiar la URL de la imagen al portapapeles (reemplazar pyperclip por un enfoque de JavaScript en navegadores)
def copiar_imagen_al_portapapeles(b):
    pyperclip.copy(producto_seleccionado['imagen'])  # Copia la URL de la imagen al portapapeles
    print("Imagen copiada al portapapeles.")

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Inner forzado por {inner_forzado}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML mejorado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px; width: 100%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px;">
        <h2 style="color: #333; text-align: left;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; float:right; margin-left:10px; border-radius: 8px;" alt="Imagen del producto">
        <p style="font-size: 16px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio:</strong> {producto.get('Precio', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> {producto.get('Precio Mayorista', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Inner Forzado:</strong> <span style="color: {inner_forzado_color};">{inner_forzado_texto}</span></p>
        <p style="font-size: 16px;"><strong>Stock:</strong> <span style="color: {stock_color};">{producto.get('Stock', 'Sin datos')}</span></p>
        <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
    </div>
    <div style="clear:both;"></div>
    """
    display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},  # Ajustar el ancho de la descripción
                layout=widgets.Layout(width='50%')  # Ajustar el tamaño del Dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_borrar, boton_copiar)
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Función para borrar la búsqueda y restablecer todo
def borrar_busqueda(b):
    clear_output(wait=True)  # Limpiar la salida anterior
    entrada_busqueda.value = ''  # Limpiar el texto de búsqueda
    display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)  # Mostrar nuevamente el cuadro de búsqueda y el botón de borrar

# Cuadro de búsqueda interactivo con icono de lupa
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    description='',
    layout=widgets.Layout(width='50%'),  # Ajustar el tamaño del cuadro de búsqueda
    style={'description_width': 'initial'}  # Ajustar el ancho de la descripción
)

# Botón de borrar más pequeño y centrado
boton_borrar = widgets.Button(
    description="Borrar búsqueda",
    button_style='danger',
    layout=widgets.Layout(width='20%', border_radius='12px', margin='0 auto')  # Bordes redondeados y centrado
)

boton_borrar.on_click(borrar_busqueda)

# Botón para copiar la imagen al portapapeles
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='20%', border_radius='12px', margin='0 auto')  # Bordes redondeados
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" cuando el cuadro de búsqueda está vacío
super_buscador_img = Image(filename='/content/sample_data/bot (8).png', width=400)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de borrar, botón de copiar y la imagen del Super Buscador
display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output, Image

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    # Ejecutar un pequeño script JavaScript que copia la URL de la imagen al portapapeles
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Inner forzado por {inner_forzado}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML mejorado para evitar que la imagen se desplace
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px; width: 100%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px;">
        <h2 style="color: #333; text-align: left;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; float:right; margin-left:10px; border-radius: 8px; max-width: 100%; height: auto;" alt="Imagen del producto">
        <p style="font-size: 16px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>  <!-- Signo de $ agregado -->
        <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> {producto.get('Precio Mayorista', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Inner Forzado:</strong> <span style="color: {inner_forzado_color};">{inner_forzado_texto}</span></p>
        <p style="font-size: 16px;"><strong>Stock:</strong> <span style="color: {stock_color};">{producto.get('Stock', 'Sin datos')}</span></p>
        <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
    </div>
    <div style="clear:both;"></div>
    """
    display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)  # Evitar duplicaciones mostrando todo de nuevo
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},  # Ajustar el ancho de la descripción
                layout=widgets.Layout(width='50%')  # Ajustar el tamaño del Dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_borrar, boton_copiar)
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Función para borrar la búsqueda y restablecer todo
def borrar_busqueda(b):
    clear_output(wait=True)  # Limpiar la salida anterior
    entrada_busqueda.value = ''  # Limpiar el texto de búsqueda
    display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)  # Mostrar nuevamente el cuadro de búsqueda sin duplicar

# Cuadro de búsqueda interactivo con icono de lupa
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    description='',
    layout=widgets.Layout(width='50%'),  # Ajustar el tamaño del cuadro de búsqueda
    style={'description_width': 'initial'}  # Ajustar el ancho de la descripción
)

# Botón de borrar más pequeño y centrado
boton_borrar = widgets.Button(
    description="Borrar búsqueda",
    button_style='danger',
    layout=widgets.Layout(width='20%', border_radius='12px', margin='0 auto')  # Bordes redondeados y centrado
)

boton_borrar.on_click(borrar_busqueda)

# Botón para copiar la imagen al portapapeles
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='20%', border_radius='12px', margin='0 auto')  # Bordes redondeados
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" cuando el cuadro de búsqueda está vacío
super_buscador_img = Image(filename='/content/sample_data/bot (8).png', width=400)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de borrar, botón de copiar y la imagen del Super Buscador
display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Inner forzado por {inner_forzado}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML basado en el ejemplo proporcionado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h2 style="color: #333; text-align: center;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; margin-bottom: 15px; border-radius: 8px;" alt="Imagen del producto">
        <p style="font-size: 16px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> {producto.get('Precio Mayorista', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Inner Forzado:</strong> <span style="color: {inner_forzado_color};">{inner_forzado_texto}</span></p>
        <p style="font-size: 16px;"><strong>Stock:</strong> <span style="color: {stock_color};">{producto.get('Stock', 'Sin datos')}</span></p>
        <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
    </div>
    """
    clear_output(wait=True)
    display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)  # Evitar duplicaciones mostrando todo de nuevo
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(entrada_busqueda, boton_borrar, boton_copiar, desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Función para borrar la búsqueda y restablecer todo
def borrar_busqueda(b):
    clear_output(wait=True)
    entrada_busqueda.value = ''
    display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto'),
)

# Botón de borrar redondeado
boton_borrar = widgets.Button(
    description="Borrar búsqueda",
    button_style='danger',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_borrar.on_click(borrar_busqueda)

# Botón para copiar imagen al portapapeles, estilo más 3D
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada cuando el cuadro de búsqueda está vacío
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png', layout=widgets.Layout(width='50%', margin='10px auto'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de borrar, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Inner forzado por {inner_forzado}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML basado en el ejemplo proporcionado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h2 style="color: #333; text-align: center;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; margin-bottom: 15px; border-radius: 8px;" alt="Imagen del producto">
        <p style="font-size: 16px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> {producto.get('Precio Mayorista', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Inner Forzado:</strong> <span style="color: {inner_forzado_color};">{inner_forzado_texto}</span></p>
        <p style="font-size: 16px;"><strong>Stock:</strong> <span style="color: {stock_color};">{producto.get('Stock', 'Sin datos')}</span></p>
        <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
    </div>
    """
    clear_output(wait=True)
    display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    display(entrada_busqueda, boton_borrar, boton_copiar)  # Mostrar siempre los botones y cuadro de búsqueda
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Función para borrar la búsqueda y restablecer todo
def borrar_busqueda(b):
    clear_output(wait=True)
    entrada_busqueda.value = ''
    display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón de borrar redondeado
boton_borrar = widgets.Button(
    description="Borrar búsqueda",
    button_style='danger',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_borrar.on_click(borrar_busqueda)

# Botón para copiar imagen al portapapeles, estilo más 3D
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada cuando el cuadro de búsqueda está vacío
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png', layout=widgets.Layout(width='50%', margin='10px auto', justify_content='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de borrar, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Inner forzado por {inner_forzado}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML basado en el ejemplo proporcionado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h2 style="color: #333; text-align: center;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; margin-bottom: 15px; border-radius: 8px;" alt="Imagen del producto">
        <p style="font-size: 16px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> {producto.get('Precio Mayorista', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Inner Forzado:</strong> <span style="color: {inner_forzado_color};">{inner_forzado_texto}</span></p>
        <p style="font-size: 16px;"><strong>Stock:</strong> <span style="color: {stock_color};">{producto.get('Stock', 'Sin datos')}</span></p>
        <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
    </div>
    """
    # Mostrar siempre los botones, el buscador y los datos del producto sin remover nada
    display(entrada_busqueda, boton_borrar, boton_copiar, HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    display(entrada_busqueda, boton_borrar, boton_copiar)  # Mantener los botones y cuadro de búsqueda visibles
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_borrar, boton_copiar)  # Mantener siempre el buscador y los botones visibles
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Función para borrar la búsqueda y restablecer todo
def borrar_busqueda(b):
    clear_output(wait=True)
    entrada_busqueda.value = ''
    display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón de borrar redondeado
boton_borrar = widgets.Button(
    description="Borrar búsqueda",
    button_style='danger',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_borrar.on_click(borrar_busqueda)

# Botón para copiar imagen al portapapeles, estilo más 3D
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada cuando el cuadro de búsqueda está vacío
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png', layout=widgets.Layout(width='50%', margin='10px auto', justify_content='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de borrar, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    venta_forzada_texto = "Venta Forzada" if producto.get('Inner Forzado', "Sin datos") == "SÍ" else "NO"
    venta_forzada_color = "red" if producto.get('Inner Forzado', "Sin datos") == "SÍ" else "green"

    # Diseño HTML mejorado con jerarquía visual
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 20px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px;">
        <h2 style="color: #333; text-align: center; font-size: 24px;">{producto.get('Nombre', 'Sin datos')}</h2>
        <div style="text-align: center; margin-bottom: 20px;">
            <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; border-radius: 8px;" alt="Imagen del producto">
        </div>
        <p style="font-size: 18px; text-align: center; color: #555;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px; text-align: center; color: #777;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <div style="display: flex; justify-content: space-around; margin-top: 20px;">
            <div style="text-align: left;">
                <p style="font-size: 24px; color: {stock_color};"><strong>Stock:</strong> {producto.get('Stock', 'Sin datos')}</p>
                <p style="font-size: 24px; color: #333;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>
            </div>
            <div style="text-align: right;">
                <p style="font-size: 16px;"><strong>Venta Forzada:</strong> <span style="color: {venta_forzada_color};">{venta_forzada_texto}</span></p>
                <p style="font-size: 16px; color: #777;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
            </div>
        </div>
        <div style="text-align: center; margin-top: 20px;">
            <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
            <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
            <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            <p style="font-size: 16px; color: #555;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
        </div>
    </div>
    """
    clear_output(wait=True)
    display(entrada_busqueda, boton_borrar, boton_copiar, HTML(html_content))

# Función para actualizar la lista de productos
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)
    display(entrada_busqueda, boton_borrar, boton_copiar)  # Mantener los botones y cuadro de búsqueda visibles
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_borrar, boton_copiar)  # Mantener siempre el buscador y los botones visibles
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Función para borrar la búsqueda
def borrar_busqueda(b):
    clear_output(wait=True)
    entrada_busqueda.value = ''
    display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón de borrar redondeado
boton_borrar = widgets.Button(
    description="Borrar búsqueda",
    button_style='danger',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_borrar.on_click(borrar_busqueda)

# Botón para copiar imagen
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada cuando el cuadro de búsqueda está vacío
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png', layout=widgets.Layout(width='50%', margin='10px auto', justify_content='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de borrar, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_borrar, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    venta_forzada_texto = "Venta Forzada" if producto.get('Inner Forzado', "Sin datos") == "SÍ" else "NO"
    venta_forzada_color = "red" if producto.get('Inner Forzado', "Sin datos") == "SÍ" else "green"

    # Diseño HTML mejorado con jerarquía visual
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 20px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px;">
        <h2 style="color: #333; text-align: center; font-size: 24px;">{producto.get('Nombre', 'Sin datos')}</h2>
        <div style="text-align: center; margin-bottom: 20px;">
            <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; border-radius: 8px;" alt="Imagen del producto">
        </div>
        <p style="font-size: 18px; text-align: center; color: #555;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px; text-align: center; color: #777;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <div style="display: flex; justify-content: space-around; margin-top: 20px;">
            <div style="text-align: left;">
                <p style="font-size: 24px; color: {stock_color};"><strong>Stock:</strong> {producto.get('Stock', 'Sin datos')}</p>
                <p style="font-size: 24px; color: #333;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>
            </div>
            <div style="text-align: right;">
                <p style="font-size: 16px;"><strong>Venta Forzada:</strong> <span style="color: {venta_forzada_color};">{venta_forzada_texto}</span></p>
                <p style="font-size: 16px; color: #777;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
            </div>
        </div>
        <div style="text-align: center; margin-top: 20px;">
            <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
            <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
            <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            <p style="font-size: 16px; color: #555;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
        </div>
    </div>
    """
    clear_output(wait=True)
    display(entrada_busqueda, boton_copiar, HTML(html_content))

# Función para actualizar la lista de productos
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)
    display(entrada_busqueda, boton_copiar)  # Mantener los botones y cuadro de búsqueda visibles
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_copiar)  # Mantener siempre el buscador y los botones visibles
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón para copiar imagen
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada cuando el cuadro de búsqueda está vacío
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png', layout=widgets.Layout(width='50%', margin='10px auto', justify_content='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con el formato actualizado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Venta Forzada"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML con los datos principales a la derecha de la imagen
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px;">
        <div style="display: flex; flex-direction: row; align-items: center; justify-content: space-around;">
            <div style="flex: 1; text-align: center;">
                <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; margin-bottom: 15px; border-radius: 8px;" alt="Imagen del producto">
            </div>
            <div style="flex: 1; padding-left: 20px;">
                <h2 style="color: #333; text-align: left;">{producto.get('Nombre', 'Sin datos')}</h2>
                <p style="font-size: 20px; color: {stock_color};"><strong>Stock:</strong> {producto.get('Stock', 'Sin datos')}</p>
                <p style="font-size: 20px;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>
                <p style="font-size: 14px; color: {inner_forzado_color};"><strong>Venta Forzada:</strong> {inner_forzado_texto}</p>
                <p style="font-size: 14px;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
            </div>
        </div>
        <div style="text-align: center; margin-top: 20px;">
            <p style="font-size: 14px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
        </div>
    </div>
    """
    display(entrada_busqueda, boton_copiar, HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    display(entrada_busqueda, boton_copiar)  # Mantener los botones y cuadro de búsqueda visibles
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_copiar)  # Mantener siempre el buscador y los botones visibles
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón para copiar imagen al portapapeles
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada cuando el cuadro de búsqueda está vacío
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png', layout=widgets.Layout(width='50%', margin='10px auto', justify_content='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con el formato correcto
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Venta Forzada"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML con los datos principales correctamente alineados y las categorías al final
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px;">
        <div style="display: flex; flex-direction: row; align-items: center; justify-content: space-around;">
            <div style="flex: 1; text-align: center;">
                <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; margin-bottom: 15px; border-radius: 8px;" alt="Imagen del producto">
            </div>
            <div style="flex: 1; padding-left: 20px;">
                <h2 style="color: #333; text-align: left;">{producto.get('Nombre', 'Sin datos')}</h2>
                <p style="font-size: 20px; color: {stock_color};"><strong>Stock:</strong> {producto.get('Stock', 'Sin datos')}</p>
                <p style="font-size: 20px;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>
                <p style="font-size: 14px; color: {inner_forzado_color};"><strong>Venta Forzada:</strong> {inner_forzado_texto}</p>
                <p style="font-size: 14px;"><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
            </div>
        </div>
        <div style="text-align: center; margin-top: 20px;">
            <p style="font-size: 14px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
        </div>
    </div>
    """
    display(entrada_busqueda, boton_copiar, HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    display(entrada_busqueda, boton_copiar)  # Mantener los botones y cuadro de búsqueda visibles
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_copiar)  # Mantener siempre el buscador y los botones visibles
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón para copiar imagen al portapapeles
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada cuando el cuadro de búsqueda está vacío
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png', layout=widgets.Layout(width='50%', margin='10px auto', justify_content='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con el formato correcto
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    precio_forzado = producto.get('Precio Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Venta Forzada"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML con los datos principales correctamente alineados
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px;">
        <h2 style="color: #333; text-align: center; font-size: 28px;">{producto.get('Nombre', 'Sin datos')}</h2>
        <div style="display: flex; flex-direction: row; align-items: center; justify-content: space-around;">
            <div style="flex: 1; text-align: center;">
                <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; margin-bottom: 15px; border-radius: 8px;" alt="Imagen del producto">
            </div>
            <div style="flex: 1; padding-left: 20px;">
                <p style="font-size: 20px; color: {stock_color};"><strong>Stock:</strong> {producto.get('Stock', 'Sin datos')}</p>
                <p style="font-size: 20px;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>
                <p style="font-size: 16px; color: {inner_forzado_color};"><strong>Venta Forzada:</strong> {inner_forzado_texto}</p>
                <p style="font-size: 16px;"><strong>Precio por Inner Forzado:</strong> ${precio_forzado}</p>
                <p style="font-size: 16px;"><strong>Unidades por Bulto:</strong> {producto.get('Unidades por Bulto', 'Sin datos')}</p>
            </div>
        </div>
        <div style="text-align: center; margin-top: 20px;">
            <p style="font-size: 14px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        </div>
    </div>
    """
    display(entrada_busqueda, boton_copiar, HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    display(entrada_busqueda, boton_copiar)  # Mantener los botones y cuadro de búsqueda visibles
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_copiar)  # Mantener siempre el buscador y los botones visibles
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón para copiar imagen al portapapeles
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada cuando el cuadro de búsqueda está vacío
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png', layout=widgets.Layout(width='50%', margin='10px auto', justify_content='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Venta Forzada"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        inner_forzado_color = "green"

    # Diseño HTML basado en el ejemplo proporcionado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h2 style="color: #333; text-align: center;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; margin-bottom: 15px; border-radius: 8px;" alt="Imagen del producto">
        <div style="display: flex; justify-content: space-between;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {producto.get('Stock', 'Sin datos')}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${producto.get('Precio', 'Sin datos')}</p>
                <p style="font-size: 18px; color: {inner_forzado_color};">{inner_forzado_texto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p><strong>Precio por Bulto:</strong> {producto.get('Precio x Bulto', 'Sin datos')}</p>
                <p><strong>Unidades por Bulto:</strong> {producto.get('Unidades x Bulto', 'Sin datos')}</p>
            </div>
        </div>
        <p style="font-size: 16px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
    </div>
    """
    # Mostrar siempre los botones, el buscador y los datos del producto sin remover nada
    display(entrada_busqueda, boton_copiar, HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    display(entrada_busqueda, boton_copiar)  # Mantener los botones y cuadro de búsqueda visibles
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_copiar)  # Mantener siempre el buscador y los botones visibles
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón para copiar imagen al portapapeles centrado
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_copiar, super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con el formato correcto
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    inner_forzado = producto.get('Inner Forzado', "Sin datos")
    precio_forzado = producto.get('Precio Forzado', "Sin datos")
    unidades_bulto = producto.get('Unidades por Bulto', 'Sin datos')

    # Mostrar "Precio Caja/Venta" solo si el inner está forzado
    if inner_forzado != "Sin datos" and inner_forzado > 0:
        inner_forzado_texto = f"Venta Forzada"
        precio_venta_texto = f"<strong>Precio Caja/Venta:</strong> ${precio_forzado}"
        unidades_bulto_texto = f"<strong>Unidades por Bulto:</strong> {unidades_bulto}"
        inner_forzado_color = "red"
    else:
        inner_forzado_texto = "NO"
        precio_venta_texto = ""
        unidades_bulto_texto = ""
        inner_forzado_color = "green"

    # Diseño HTML con los datos principales correctamente alineados y ajustados
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px;">
        <h2 style="color: #333; text-align: center; font-size: 28px;">{producto.get('Nombre', 'Sin datos')}</h2>
        <div style="display: flex; flex-direction: row; align-items: center; justify-content: space-around;">
            <div style="flex: 1; text-align: center;">
                <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; margin-bottom: 15px; border-radius: 8px;" alt="Imagen del producto">
            </div>
            <div style="flex: 1; padding-left: 20px;">
                <p style="font-size: 20px; color: {stock_color};"><strong>Stock:</strong> {producto.get('Stock', 'Sin datos')}</p>
                <p style="font-size: 20px;"><strong>Precio:</strong> ${producto.get('Precio', 'Sin datos')}</p>
                <p style="font-size: 16px; color: {inner_forzado_color};"><strong>Venta Forzada:</strong> {inner_forzado_texto}</p>
                <p style="font-size: 16px;">{precio_venta_texto}</p>
                <p style="font-size: 16px;">{unidades_bulto_texto}</p>
            </div>
        </div>
        <div style="text-align: center; margin-top: 20px;">
            <p style="font-size: 18px; font-weight: bold;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
            <p style="font-size: 14px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
        </div>
    </div>
    """
    display(entrada_busqueda, boton_copiar, HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    display(entrada_busqueda, boton_copiar)  # Mantener los botones y cuadro de búsqueda visibles
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena (str) y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_copiar)  # Mantener siempre el buscador y los botones visibles
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón para copiar imagen al portapapeles
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada cuando el cuadro de búsqueda está vacío
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png', layout=widgets.Layout(width='50%', margin='10px auto', justify_content='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_copiar, super_buscador_img)

pip install ipywidgets

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const imgURL = document.querySelector("img[alt='Imagen del producto']").src;
    const textArea = document.createElement("textarea");
    textArea.value = imgURL;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Imagen copiada al portapapeles: ' + imgURL);
    """))

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen
    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"

    # Obtener 'forzar múltiplos' y calcular 'Precio Caja/Venta' si aplica
    forzar_multiplos = producto.get('forzar múltiplos', "Sin datos")
    precio_jugueteria_face = producto.get('precio jugueteria face', 0)
    if forzar_multiplos != "Sin datos" and forzar_multiplos > 0:
        venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
        venta_forzada_color = "red"
        precio_caja_venta = forzar_multiplos * precio_jugueteria_face
    else:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueteria_face

    precio_mayorista = producto.get('precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidades por bulto', 'Sin datos')

    # Diseño HTML mejorado con estilo futurista
    html_content = f"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');
    .product-card {{
        border:2px solid #00FFFF;
        padding: 15px;
        margin: 10px auto;
        width: 90%;
        font-family: 'Orbitron', sans-serif;
        background: linear-gradient(135deg, #0D0D0D, #1C1C1C);
        box-shadow: 0 0 20px #00FFFF;
        border-radius: 10px;
        text-align: center;
        color: #fff;
    }}
    .product-card h2 {{
        color: #00FFFF;
        text-align: center;
    }}
    .product-card img {{
        width:200px;
        height: auto;
        margin-bottom: 15px;
        border-radius: 8px;
        border: 2px solid #00FFFF;
    }}
    .product-card p {{
        font-size: 16px;
    }}
    .product-card strong {{
        color: #00FFFF;
    }}
    .product-card .left {{
        text-align: left;
        padding-left: 20px;
    }}
    .product-card .right {{
        text-align: right;
        padding-right: 20px;
    }}
    .product-card .stock {{
        font-size: 20px;
        font-weight: bold;
        color: {stock_color};
    }}
    .product-card .price {{
        font-size: 20px;
        font-weight: bold;
        color: #00FF00;
    }}
    .product-card .venta-forzada {{
        font-size: 18px;
        color: {venta_forzada_color};
    }}
    .product-card .precio-caja {{
        font-size: 18px;
        font-weight: bold;
        color: #FFD700;
    }}
    </style>

    <div class="product-card">
        <h2>{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" alt="Imagen del producto">
        <div style="display: flex; justify-content: space-between;">
            <div class="left">
                <p class="stock">Stock: {producto.get('Stock', 'Sin datos')}</p>
                <p class="price">Precio: ${precio_jugueteria_face}</p>
                <p class="venta-forzada">{venta_forzada_texto}</p>
                <p class="precio-caja">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
            <div class="right">
                <p><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
        </div>
        <p><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
        <p><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
    </div>
    """
    # Mostrar siempre los botones, el buscador y los datos del producto sin remover nada
    display(entrada_busqueda, boton_copiar, HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(texto):
    clear_output(wait=True)  # Limpiar la salida anterior
    display(entrada_busqueda, boton_copiar)  # Mantener los botones y cuadro de búsqueda visibles
    if texto == '':  # Si el cuadro de búsqueda está vacío, mostrar la imagen del "Super Buscador"
        display(super_buscador_img)
    else:
        coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
        if not coincidencias.empty:
            # Crear un diccionario de opciones donde la clave sea una cadena y el valor sea el DataFrame completo
            opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

            desplegable = widgets.Dropdown(
                options=opciones,
                description='Seleccionar:',
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
            )
            display(desplegable)

            # Conectar el dropdown para mostrar el producto cuando se seleccione
            def mostrar_producto_cuando_selecciona(change):
                clear_output(wait=True)
                display(entrada_busqueda, boton_copiar)  # Mantener siempre el buscador y los botones visibles
                mostrar_producto_formato_completo(desplegable.value)

            desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
        else:
            print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón para copiar imagen al portapapeles centrado
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='primary',
    layout=widgets.Layout(width='40%', border_radius='15px', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(value=open('/content/sample_data/bot (8).png', 'rb').read(), format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center'))

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(lambda change: actualizar_lista_de_productos(entrada_busqueda.value), names='value')

# Mostrar cuadro de búsqueda, botón de copiar y la imagen del Super Buscador centrados
display(entrada_busqueda, boton_copiar, super_buscador_img)

!pip install ipywidgets
!jupyter nbextension enable --py widgetsnbextension

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para copiar la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    async function copyImageToClipboard() {
        const img = document.querySelector("img[alt='Imagen del producto']");
        if (!img) {
            alert('No hay imagen para copiar.');
            return;
        }
        try {
            const data = await fetch(img.src);
            const blob = await data.blob();
            await navigator.clipboard.write([
                new ClipboardItem({ [blob.type]: blob })
            ]);
            alert('Imagen copiada al portapapeles.');
        } catch (err) {
            console.error(err);
            alert('Error al copiar la imagen: ' + err);
        }
    }
    copyImageToClipboard();
    """))

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen

    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    forzar_multiplos = producto.get('forzar múltiplos', "Sin datos")
    precio_jugueteria_face = producto.get('precio jugueteria face', 0)
    if forzar_multiplos != "Sin datos" and forzar_multiplos > 0:
        venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
        venta_forzada_color = "red"
        precio_caja_venta = forzar_multiplos * precio_jugueteria_face
    else:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueteria_face

    precio_mayorista = producto.get('precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidades por bulto', 'Sin datos')

    # Diseño HTML basado en el original
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h2 style="color: #333; text-align: center;">{producto.get('Nombre', 'Sin datos')}</h2>
        <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; margin-bottom: 15px; border-radius: 8px;" alt="Imagen del producto">
        <div style="display: flex; justify-content: space-between;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {producto.get('Stock', 'Sin datos')}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueteria_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
        </div>
        <p style="font-size: 16px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
        <p style="font-size: 16px;"><strong>Fecha de Vencimiento:</strong> Sin datos</p>
        <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = change['new']
    with output_area:
        output_area.clear_output()
        if texto == '':
            display(super_buscador_img)
        else:
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)

                def mostrar_producto_cuando_selecciona(change):
                    mostrar_producto_formato_completo(desplegable.value)

                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón "Copiar imagen" con estilo futurista y moderno
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='20px auto', justify_content='center', display='flex', align_items='center')
)
boton_copiar.style.button_color = '#1E90FF'  # Azul vibrante
boton_copiar.style.font_weight = 'bold'
boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Mostrar cuadro de búsqueda, botón de copiar y área de salida
display(entrada_busqueda, boton_copiar, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para copiar la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    async function copyImageToClipboard() {
        const img = document.querySelector("img[alt='Imagen del producto']");
        if (!img) {
            alert('No hay imagen para copiar.');
            return;
        }
        try {
            const data = await fetch(img.src);
            const blob = await data.blob();
            await navigator.clipboard.write([
                new ClipboardItem({ [blob.type]: blob })
            ]);
            alert('Imagen copiada al portapapeles.');
        } catch (err) {
            console.error(err);
            alert('Error al copiar la imagen: ' + err);
        }
    }
    copyImageToClipboard();
    """))

# Función para mostrar el producto seleccionado con un mejor estilo visual
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen

    stock_color = "red" if producto.get('Stock', 0) < 5 else "green"
    forzar_multiplos = producto.get('Forzar Multiplos', "Sin datos")
    precio_jugueteria_face = producto.get('Precio Jugueteria Face', 0)
    if forzar_multiplos != "Sin datos" and forzar_multiplos != 0 and not pd.isna(forzar_multiplos):
        venta_forzada_texto = f"Venta Forzada: {int(forzar_multiplos)}"
        venta_forzada_color = "red"
        precio_caja_venta = int(forzar_multiplos) * precio_jugueteria_face
    else:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueteria_face

    precio_mayorista = producto.get('Precio Mayorista', 'Sin datos')
    unidades_por_bulto = producto.get('Unidades por Bulto', 'Sin datos')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {producto.get('Codigo', 'Sin datos')}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{producto.get('Imagen', '')}" style="width:200px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {producto.get('Stock', 'Sin datos')}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueteria_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = change['new']
    with output_area:
        output_area.clear_output()
        if texto == '':
            display(super_buscador_img)
        else:
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)

                def mostrar_producto_cuando_selecciona(change):
                    mostrar_producto_formato_completo(desplegable.value)

                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón "Copiar imagen" con estilo futurista y moderno
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='20px auto', justify_content='center', display='flex', align_items='center')
)
boton_copiar.style.button_color = '#1E90FF'  # Azul vibrante
boton_copiar.style.font_weight = 'bold'
boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Mostrar cuadro de búsqueda, botón de copiar y área de salida
display(entrada_busqueda, boton_copiar, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

import pandas as pd  # Asegúrate de importar pandas
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para copiar la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    async function copyImageToClipboard() {
        const img = document.querySelector("img[alt='Imagen del producto']");
        if (!img) {
            alert('No hay imagen para copiar.');
            return;
        }
        try {
            const data = await fetch(img.src);
            const blob = await data.blob();
            await navigator.clipboard.write([
                new ClipboardItem({ [blob.type]: blob })
            ]);
            alert('Imagen copiada al portapapeles.');
        } catch (err) {
            console.error(err);
            alert('Error al copiar la imagen: ' + err);
        }
    }
    copyImageToClipboard();
    """))

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen

    stock = producto.get('Stock', 'Sin datos')
    stock_color = "red" if isinstance(stock, (int, float)) and stock < 5 else "green"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    if not isinstance(precio_jugueterias_face, (int, float)):
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    if isinstance(forzar_multiplos, (int, float)) and forzar_multiplos > 0:
        venta_forzada_texto = f"Venta Forzada: {int(forzar_multiplos)}"
        venta_forzada_color = "red"
        precio_caja_venta = int(forzar_multiplos) * precio_jugueterias_face
    else:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio Mayorista', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {producto.get('Codigo', 'Sin datos')}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{producto.get('imagen', '')}" style="width:200px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = change['new']
    with output_area:
        output_area.clear_output()
        if texto == '':
            display(super_buscador_img)
        else:
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)

                def mostrar_producto_cuando_selecciona(change):
                    mostrar_producto_formato_completo(desplegable.value)

                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón "Copiar imagen" con estilo moderno
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='20px auto', justify_content='center', display='flex', align_items='center')
)
boton_copiar.style.button_color = '#1E90FF'  # Azul vibrante
boton_copiar.style.font_weight = 'bold'
boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Mostrar cuadro de búsqueda, botón de copiar y área de salida
display(entrada_busqueda, boton_copiar, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

import pandas as pd  # Asegúrate de importar pandas
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para copiar la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    async function copyImageToClipboard() {
        const img = document.querySelector("img[alt='Imagen del producto']");
        if (!img) {
            alert('No hay imagen para copiar.');
            return;
        }
        try {
            const data = await fetch(img.src);
            const blob = await data.blob();
            await navigator.clipboard.write([
                new ClipboardItem({ [blob.type]: blob })
            ]);
            alert('Imagen copiada al portapapeles.');
        } catch (err) {
            console.error(err);
            alert('Error al copiar la imagen: ' + err);
        }
    }
    copyImageToClipboard();
    """))

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen

    stock = producto.get('Stock', 'Sin datos')
    stock_color = "red" if isinstance(stock, (int, float)) and stock < 5 else "green"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    if not isinstance(precio_jugueterias_face, (int, float)):
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    if isinstance(forzar_multiplos, (int, float)) and forzar_multiplos > 0:
        venta_forzada_texto = f"Venta Forzada: {int(forzar_multiplos)}"
        venta_forzada_color = "red"
        precio_caja_venta = int(forzar_multiplos) * precio_jugueterias_face
    else:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {producto.get('Codigo', 'Sin datos')}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{producto.get('imagen', '')}" style="width:400px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = change['new']
    with output_area:
        output_area.clear_output()
        if texto == '':
            display(super_buscador_img)
        else:
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)

                def mostrar_producto_cuando_selecciona(change):
                    mostrar_producto_formato_completo(desplegable.value)

                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón "Copiar imagen" con estilo moderno
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='20px auto', justify_content='center', display='flex', align_items='center')
)
boton_copiar.style.button_color = '#1E90FF'  # Azul vibrante
boton_copiar.style.font_weight = 'bold'
boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Mostrar cuadro de búsqueda, botón de copiar y área de salida
display(entrada_busqueda, boton_copiar, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

"""este de abajo anda es el mejor hasta ahora"""

import pandas as pd  # Asegúrate de importar pandas
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const img = document.querySelector("img[alt='Imagen del producto']");
    if (!img) {
        alert('No hay imagen para copiar.');
    } else {
        const imgURL = img.src;
        navigator.clipboard.writeText(imgURL).then(function() {
            alert('URL de la imagen copiada al portapapeles.');
        }, function(err) {
            console.error('Error al copiar la URL: ', err);
            alert('Error al copiar la URL de la imagen: ' + err);
        });
    }
    """))

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen

    stock = producto.get('Stock', 'Sin datos')
    stock_color = "red" if isinstance(stock, (int, float)) and stock < 5 else "green"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    if not isinstance(precio_jugueterias_face, (int, float)):
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    if isinstance(forzar_multiplos, (int, float)) and forzar_multiplos > 0:
        venta_forzada_texto = f"Venta Forzada: {int(forzar_multiplos)}"
        venta_forzada_color = "red"
        precio_caja_venta = int(forzar_multiplos) * precio_jugueterias_face
    else:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {producto.get('Codigo', 'Sin datos')}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{producto.get('imagen', '')}" style="width:400px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = change['new']
    with output_area:
        output_area.clear_output()
        if texto == '':
            display(super_buscador_img)
        else:
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)

                def mostrar_producto_cuando_selecciona(change):
                    mostrar_producto_formato_completo(desplegable.value)

                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón "Copiar imagen" con estilo moderno
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='20px auto', justify_content='center', display='flex', align_items='center')
)
boton_copiar.style.button_color = '#1E90FF'  # Azul vibrante
boton_copiar.style.font_weight = 'bold'
boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Mostrar cuadro de búsqueda, botón de copiar y área de salida
display(entrada_busqueda, boton_copiar, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

from google.colab import drive
drive.mount('/content/drive')

import os

# Ruta a la carpeta de imágenes en tu Google Drive
ruta_imagenes = '/content/drive/MyDrive/todas las Imagenes de Mundo Peluche x 1800 al 24 de sep'

# Obtener la lista de archivos en la carpeta
archivos_imagenes = os.listdir(ruta_imagenes)

# Crear un diccionario que asocia los códigos de producto con las rutas de las imágenes
diccionario_imagenes = {}

for archivo in archivos_imagenes:
    # Asumiendo que los archivos son de la forma 'codigo.jpg' o 'codigo.png'
    nombre_archivo, extension = os.path.splitext(archivo)
    codigo_producto = nombre_archivo  # El nombre del archivo es el código del producto
    ruta_imagen = os.path.join(ruta_imagenes, archivo)
    diccionario_imagenes[codigo_producto] = ruta_imagen

# Suponiendo que tu DataFrame se llama df y tiene una columna 'Codigo'
def obtener_ruta_imagen(codigo):
    codigo_str = str(codigo)  # Asegurarse de que el código es una cadena
    return diccionario_imagenes.get(codigo_str, '')  # Devolver ruta o cadena vacía si no se encuentra

# Crear la nueva columna 'ruta_imagen_local' en el DataFrame
df['ruta_imagen_local'] = df['Codigo'].apply(obtener_ruta_imagen)

import pandas as pd  # Asegúrate de importar pandas
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Asegúrate de haber ejecutado los pasos anteriores para montar Google Drive y preparar el DataFrame

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const img = document.querySelector("img[alt='Imagen del producto']");
    if (!img) {
        alert('No hay imagen para copiar.');
    } else {
        const imgURL = img.src;
        navigator.clipboard.writeText(imgURL).then(function() {
            alert('URL de la imagen copiada al portapapeles.');
        }, function(err) {
            console.error('Error al copiar la URL: ', err);
            alert('Error al copiar la URL de la imagen: ' + err);
        });
    }
    """))

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para copiar la imagen

    stock = producto.get('Stock', 'Sin datos')
    stock_color = "red" if isinstance(stock, (int, float)) and stock < 5 else "green"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    if not isinstance(precio_jugueterias_face, (int, float)):
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    if isinstance(forzar_multiplos, (int, float)) and forzar_multiplos > 0:
        venta_forzada_texto = f"Venta Forzada: {int(forzar_multiplos)}"
        venta_forzada_color = "red"
        precio_caja_venta = int(forzar_multiplos) * precio_jugueterias_face
    else:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la ruta de la imagen local
    ruta_imagen_local = producto.get('ruta_imagen_local', '')

    # Convertir la ruta local en una URL que pueda ser utilizada en HTML
    from urllib.request import pathname2url
    from IPython.display import FileLink

    if ruta_imagen_local and os.path.exists(ruta_imagen_local):
        ruta_imagen_url = 'file://' + pathname2url(ruta_imagen_local)
    else:
        ruta_imagen_url = ''  # Si no hay imagen, dejar vacío

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {producto.get('Codigo', 'Sin datos')}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{ruta_imagen_url}" style="width:400px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = change['new']
    with output_area:
        output_area.clear_output()
        if texto == '':
            display(super_buscador_img)
        else:
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)

                def mostrar_producto_cuando_selecciona(change):
                    mostrar_producto_formato_completo(desplegable.value)

                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón "Copiar imagen" con estilo moderno
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='20px auto', justify_content='center', display='flex', align_items='center')
)
boton_copiar.style.button_color = '#1E90FF'  # Azul vibrante
boton_copiar.style.font_weight = 'bold'
boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Mostrar cuadro de búsqueda, botón de copiar y área de salida
display(entrada_busqueda, boton_copiar, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

# Paso 1: Montar Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Paso 2: Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output
import os
import base64

# Paso 3: Cargar tu DataFrame
# Asegúrate de cargar tu DataFrame 'df' con tus datos
# Por ejemplo:
# df = pd.read_csv('/content/drive/MyDrive/tu_archivo.csv')  # Ajusta la ruta según corresponda

# Paso 4: Crear el diccionario de imágenes
ruta_imagenes = '/content/drive/MyDrive/todas las Imagenes de Mundo Peluche x 1800 al 24 de sep'

archivos_imagenes = os.listdir(ruta_imagenes)

diccionario_imagenes = {}

for archivo in archivos_imagenes:
    nombre_archivo, extension = os.path.splitext(archivo)
    codigo_producto = nombre_archivo  # El nombre del archivo es el código del producto
    ruta_imagen = os.path.join(ruta_imagenes, archivo)
    diccionario_imagenes[codigo_producto] = ruta_imagen

# Paso 5: Añadir la ruta de la imagen al DataFrame
def obtener_ruta_imagen(codigo):
    codigo_str = str(codigo).strip()  # Asegurarse de que el código es una cadena y eliminar espacios
    return diccionario_imagenes.get(codigo_str, '')  # Devolver ruta o cadena vacía si no se encuentra

df['ruta_imagen_local'] = df['Codigo'].apply(obtener_ruta_imagen)

# Paso 6: Definir las funciones y widgets para el buscador

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para copiar la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    alert('Debido a restricciones del navegador, no es posible copiar imágenes locales al portapapeles directamente.');
    """))

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para descargar la imagen

    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la ruta de la imagen local
    ruta_imagen_local = producto.get('ruta_imagen_local', '')

    # Cargar la imagen y convertirla a base64
    if ruta_imagen_local and os.path.exists(ruta_imagen_local):
        with open(ruta_imagen_local, "rb") as image_file:
            encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
        imagen_html = f'<img src="data:image/jpeg;base64,{encoded_string}" style="width:400px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">'
    else:
        imagen_html = '<p>Imagen no disponible</p>'

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {producto.get('Codigo', 'Sin datos')}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            {imagen_html}
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = change['new']
    with output_area:
        output_area.clear_output()
        if texto == '':
            display(super_buscador_img)
        else:
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)

                def mostrar_producto_cuando_selecciona(change):
                    mostrar_producto_formato_completo(desplegable.value)

                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón "Copiar imagen" con estilo moderno
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_copiar.style.button_color = '#1E90FF'  # Azul vibrante
boton_copiar.style.font_weight = 'bold'
boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Botón para descargar la imagen
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'

def descargar_imagen(b):
    ruta_imagen_local = producto_seleccionado.get('ruta_imagen_local', '')
    if ruta_imagen_local and os.path.exists(ruta_imagen_local):
        from google.colab import files
        files.download(ruta_imagen_local)
    else:
        print("Imagen no disponible para descargar.")

boton_descargar.on_click(descargar_imagen)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Mostrar cuadro de búsqueda, botones y área de salida
display(entrada_busqueda, boton_copiar, boton_descargar, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

# Paso 1: Importar librerías necesarias y montar Google Drive si es necesario
# Si ya no necesitas las imágenes locales, puedes omitir montar Google Drive
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Paso 2: Cargar tu DataFrame
# Asegúrate de cargar tu DataFrame 'df' con tus datos
# Por ejemplo:
# df = pd.read_csv('/content/drive/MyDrive/tu_archivo.csv')  # Ajusta la ruta según corresponda

# Paso 3: Definir las funciones y widgets para el buscador

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para copiar la URL de la imagen al portapapeles usando JavaScript
def copiar_imagen_al_portapapeles(b):
    display(Javascript("""
    const img = document.querySelector("img[alt='Imagen del producto']");
    if (!img) {
        alert('No hay imagen para copiar.');
    } else {
        const imgURL = img.src;
        navigator.clipboard.writeText(imgURL).then(function() {
            alert('URL de la imagen copiada al portapapeles.');
        }, function(err) {
            console.error('Error al copiar la URL: ', err);
            alert('Error al copiar la URL de la imagen: ' + err);
        });
    }
    """))

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = producto.get('imagen', '')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {producto.get('Codigo', 'Sin datos')}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{img_url}" style="width:400px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = change['new']
    with output_area:
        output_area.clear_output()
        if texto == '':
            display(super_buscador_img)
        else:
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}

                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)

                def mostrar_producto_cuando_selecciona(change):
                    mostrar_producto_formato_completo(desplegable.value)

                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón "Copiar imagen" con estilo moderno
boton_copiar = widgets.Button(
    description="Copiar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_copiar.style.button_color = '#1E90FF'  # Azul vibrante
boton_copiar.style.font_weight = 'bold'
boton_copiar.on_click(copiar_imagen_al_portapapeles)

# Botón para abrir la imagen en el navegador
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Mostrar cuadro de búsqueda, botones y área de salida
display(entrada_busqueda, boton_copiar, boton_descargar, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

import pandas as pd  # Asegúrate de importar pandas
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Por ejemplo:
# df = pd.read_csv('/content/drive/MyDrive/tu_archivo.csv')  # Ajusta la ruta según corresponda

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = producto.get('imagen', '')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {producto.get('Codigo', 'Sin datos')}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{img_url}" style="width:400px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el botón "Descargar imagen" aquí
        display(boton_descargar)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = change['new']
    with output_area:
        output_area.clear_output()
        if texto == '':
            display(super_buscador_img)
        else:
            # Mostrar el GIF de carga mientras se realiza la búsqueda
            display(loading_gif)
            # Realizar la búsqueda
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                output_area.clear_output()
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                # Mostrar la lista desplegable
                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)
                # Configurar el manejador para cuando se selecciona un ítem
                def mostrar_producto_cuando_selecciona(change):
                    if change['name'] == 'value' and change['new']:
                        mostrar_producto_formato_completo(desplegable.value)
                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                output_area.clear_output()
                print("No se encontraron productos con ese nombre.")

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# GIF de carga centrado
loading_gif = widgets.Image(
    value=open('/content/loading.gif', 'rb').read(),
    format='gif',
    layout=widgets.Layout(width='10%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Conectar la entrada de texto con la función de búsqueda
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Mostrar cuadro de búsqueda y área de salida
display(entrada_busqueda, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye una columna 'Categorias' con las categorías de cada producto
# Por ejemplo:
# df = pd.read_csv('/content/drive/MyDrive/tu_archivo.csv')  # Ajusta la ruta según corresponda

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Crear un widget de selección múltiple para las categorías
seleccion_categorias = widgets.SelectMultiple(
    options=lista_categorias,
    description='Categorías:',
    layout=widgets.Layout(width='80%', height='200px', margin='10px auto'),
    style={'description_width': 'initial'}
)

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = producto.get('imagen', '')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {producto.get('Codigo', 'Sin datos')}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{img_url}" style="width:400px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 18px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {producto.get('Descripcion', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {producto.get('Categorias', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Pasillo:</strong> {producto.get('Pasillo', 'Sin datos')}, <strong>Estante:</strong> {producto.get('Estante', 'Sin datos')}</p>
                <p style="font-size: 16px;"><strong>Proveedor:</strong> {producto.get('Proveedor', 'Sin datos')}</p>
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el botón "Descargar imagen" aquí
        display(boton_descargar)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_lista_de_productos(change):
    texto = entrada_busqueda.value
    categorias_seleccionadas = list(seleccion_categorias.value)
    with output_area:
        output_area.clear_output()
        if texto == '' and not categorias_seleccionadas:
            display(super_buscador_img)
        else:
            # Filtrar el DataFrame según el texto y las categorías seleccionadas
            df_filtrado = df
            if texto != '':
                df_filtrado = df_filtrado[df_filtrado['Nombre'].str.contains(texto, case=False, na=False)]
            if categorias_seleccionadas:
                # Expandir las categorías en listas
                df_filtrado = df_filtrado.copy()
                df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                # Filtrar los productos que pertenecen a las categorías seleccionadas
                df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: any(cat in categorias_seleccionadas for cat in cats) if isinstance(cats, list) else False)]
            coincidencias = df_filtrado.head(5)  # Limitar a 5 resultados
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)
                def mostrar_producto_cuando_selecciona(change):
                    if change['name'] == 'value' and change['new']:
                        mostrar_producto_formato_completo(desplegable.value)
                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con esos criterios.")

# Conectar los widgets con la función de actualización
seleccion_categorias.observe(actualizar_lista_de_productos, names='value')
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center'),
)
entrada_busqueda.observe(actualizar_lista_de_productos, names='value')

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Mostrar cuadro de búsqueda, selección de categorías y área de salida
display(entrada_busqueda, seleccion_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

"""este esta bueno ajustas alguna que otra cosa

"""

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('/content/drive/MyDrive/tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = producto.get('imagen', '')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa; border-radius: 5px; text-align: left;">
        <h2 style="color: #333; font-size: 24px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h2>
        <p style="font-size: 16px; color: #666; margin-top: 5px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 14px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 14px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:150px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            html_producto = mostrar_producto_formato_completo(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            paginacion = widgets.HBox()
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion.children = botones_paginas
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value
    with output_area:
        output_area.clear_output()
        if not checkbox_categorias.value and not checkbox_rubro.value and texto == '':
            display(super_buscador_img)
        else:
            if checkbox_categorias.value:
                # Mostrar lista por categorías
                categoria_seleccionada = dropdown_categorias.value
                if categoria_seleccionada:
                    df_filtrado = df.copy()
                    # Expandir las categorías en listas
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar alfabéticamente
                    df_filtrado = df_filtrado.sort_values('Nombre')
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, 10)
                else:
                    print("Seleccione una categoría.")
            elif checkbox_rubro.value:
                # Sugerencia por Rubro
                rubro = entrada_rubro.value.lower()
                if rubro:
                    # Aquí puedes definir cómo relacionar el rubro con las categorías
                    # Por simplicidad, asumiremos que el rubro se compara con las categorías
                    categorias_relacionadas = [cat for cat in lista_categorias if rubro in cat.lower()]
                    if categorias_relacionadas:
                        df_filtrado = df.copy()
                        df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                        df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: any(cat in categorias_relacionadas for cat in cats) if isinstance(cats, list) else False)]
                        # Ordenar por fecha de creación (más recientes primero)
                        df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False)
                        # Mostrar lista paginada
                        mostrar_lista_productos(df_filtrado, 1, 10)
                    else:
                        print("No se encontraron categorías relacionadas con ese rubro.")
                else:
                    print("Ingrese un rubro.")
            else:
                # Búsqueda normal
                coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)
                if not coincidencias.empty:
                    opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                    desplegable = widgets.Dropdown(
                        options=opciones,
                        description='Seleccionar:',
                        style={'description_width': 'initial'},
                        layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                    )
                    display(desplegable)
                    def mostrar_producto_cuando_selecciona(change):
                        if change['name'] == 'value' and change['new']:
                            with output_area:
                                output_area.clear_output()
                                html_producto = mostrar_producto_formato_completo(desplegable.value)
                                display(HTML(html_producto))
                                display(boton_descargar)
                    desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                else:
                    print("No se encontraron productos con ese nombre.")

# Widgets para las nuevas funcionalidades

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_rubro.value = False
        entrada_rubro.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        output_area.clear_output()
        display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')

# Checkbox "Sugerencia x Rubro"
checkbox_rubro = widgets.Checkbox(
    value=False,
    description='Sugerencia x Rubro',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Entrada de rubro (inicialmente oculta)
entrada_rubro = widgets.Text(
    value='',
    placeholder='Ingresá el rubro del comercio',
    description='Rubro:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
entrada_rubro.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_entrada_rubro(change):
    if checkbox_rubro.value:
        entrada_rubro.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_categorias.value = False
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        entrada_rubro.layout.display = 'none'
        output_area.clear_output()
        display(super_buscador_img)

checkbox_rubro.observe(mostrar_ocultar_entrada_rubro, names='value')
entrada_rubro.observe(actualizar_resultados, names='value')

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkbox_categorias, dropdown_categorias, checkbox_rubro, entrada_rubro, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('/content/drive/MyDrive/tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    'juguetería': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa'],
    'librería': ['Libros y Revistas', 'Librería', 'Carpetas'],
    'regalería': ['Accesorios de moda', 'Vasos', 'Llaveros', 'Bazar y Deco'],
    'cotillón': ['Cotillon', 'Cotillón Grande', 'Decoración', 'Cotillon'],
    'kiosco': ['Kioscos', 'Llaveros', 'Figuras Coleccionables', 'Squishys'],
    'tienda de ropa': ['Indumentaria', 'Calzado', 'Medias'],
    'tecnología': ['Tecnología'],
    'papelería': ['Librería', 'Carpetas', 'Libros y Revistas'],
    'bebé': ['Indumentaria para Bebé', 'Peluches Chicos'],
    'juegos': ['Juguetería', 'Juegos de Mesa', 'Figuras Coleccionables'],
    # Agrega más rubros y categorías según sea necesario
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = producto.get('imagen', '')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa; border-radius: 5px; text-align: left;">
        <h2 style="color: #333; font-size: 24px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h2>
        <p style="font-size: 16px; color: #666; margin-top: 5px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 14px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 14px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:150px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            html_producto = mostrar_producto_formato_completo(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            paginacion = widgets.HBox()
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion.children = botones_paginas
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if not checkbox_categorias.value and not checkbox_rubro.value and texto == '':
            display(super_buscador_img)
        else:
            if checkbox_categorias.value:
                # Mostrar lista por categorías
                categoria_seleccionada = dropdown_categorias.value
                if categoria_seleccionada:
                    df_filtrado = df.copy()
                    # Expandir las categorías en listas
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar alfabéticamente
                    df_filtrado = df_filtrado.sort_values('Nombre')
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, 10)
                else:
                    print("Seleccione una categoría.")
            elif checkbox_rubro.value:
                # Sugerencia por Rubro
                rubro = entrada_rubro.value.strip().lower()
                if rubro:
                    categorias_relacionadas = rubro_a_categorias.get(rubro, [])
                    if categorias_relacionadas:
                        df_filtrado = df.copy()
                        df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                        df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: any(cat in categorias_relacionadas for cat in cats) if isinstance(cats, list) else False)]
                        # Ordenar por fecha de creación (más recientes primero)
                        df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False)
                        # Mostrar lista paginada
                        mostrar_lista_productos(df_filtrado, 1, 10)
                    else:
                        print("No se encontraron categorías relacionadas con ese rubro.")
                else:
                    print("Ingrese un rubro.")
            else:
                # Búsqueda normal
                if texto != '':
                    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)
                    if not coincidencias.empty:
                        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                        desplegable = widgets.Dropdown(
                            options=opciones,
                            description='Seleccionar:',
                            style={'description_width': 'initial'},
                            layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                        )
                        display(deplegable)
                        def mostrar_producto_cuando_selecciona(change):
                            if change['name'] == 'value' and change['new']:
                                with output_area:
                                    output_area.clear_output()
                                    html_producto = mostrar_producto_formato_completo(deplegable.value)
                                    display(HTML(html_producto))
                                    display(boton_descargar)
                        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                    else:
                        print("No se encontraron productos con ese nombre.")
                else:
                    display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_rubro.value = False
        entrada_rubro.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')

# Checkbox "Sugerencia x Rubro"
checkbox_rubro = widgets.Checkbox(
    value=False,
    description='Sugerencia x Rubro',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Entrada de rubro (inicialmente oculta)
entrada_rubro = widgets.Text(
    value='',
    placeholder='Ingresá el rubro del comercio',
    description='Rubro:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
entrada_rubro.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_entrada_rubro(change):
    with output_area:
        output_area.clear_output()
    if checkbox_rubro.value:
        entrada_rubro.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_categorias.value = False
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        entrada_rubro.layout.display = 'none'
        entrada_rubro.value = ''
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_rubro.observe(mostrar_ocultar_entrada_rubro, names='value')
entrada_rubro.observe(actualizar_resultados, names='value')

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkbox_categorias, dropdown_categorias, checkbox_rubro, entrada_rubro, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    'papelerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    'kioscos': ['Kioscos', 'Llaveros', 'Squishys', 'Pop-it', 'Accesorios de moda', 'Bijouterie'],
    'minimercados': ['Kioscos', 'Llaveros', 'Squishys', 'Pop-it'],
    'cotillones': ['Cotillon', 'Cotillón Grande', 'Decoración', 'Halloween', 'Vasos Decorativos', 'Globos'],
    'regalerías': ['Accesorios de moda', 'Bazar y Deco', 'Llaveros', 'Vasos', 'Relojes', 'Figuras Coleccionables', 'Peluches'],
    'souvenirs': ['Llaveros', 'Peluches', 'Bazar y Deco', 'Vasos Decorativos', 'Artesanías'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = producto.get('imagen', '')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa; border-radius: 5px; text-align: left;">
        <h2 style="color: #333; font-size: 24px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h2>
        <p style="font-size: 16px; color: #666; margin-top: 5px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 14px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 14px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:150px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            html_producto = mostrar_producto_formato_completo(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            paginacion = widgets.HBox()
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion.children = botones_paginas
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if not checkbox_categorias.value and not checkbox_rubro.value and texto == '':
            display(super_buscador_img)
        else:
            if checkbox_categorias.value:
                # Mostrar lista por categorías
                categoria_seleccionada = dropdown_categorias.value
                if categoria_seleccionada:
                    df_filtrado = df.copy()
                    # Expandir las categorías en listas
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar alfabéticamente
                    df_filtrado = df_filtrado.sort_values('Nombre')
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, 10)
                else:
                    print("Seleccione una categoría.")
            elif checkbox_rubro.value:
                # Sugerencia por Rubro
                rubro = entrada_rubro.value.strip().lower()
                if rubro:
                    categorias_relacionadas = rubro_a_categorias.get(rubro, [])
                    if categorias_relacionadas:
                        df_filtrado = df.copy()
                        df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                        df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: any(cat in categorias_relacionadas for cat in cats) if isinstance(cats, list) else False)]
                        # Ordenar por fecha de creación (más recientes primero)
                        df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False)
                        # Mostrar lista paginada
                        mostrar_lista_productos(df_filtrado, 1, 10)
                    else:
                        print("No se encontraron categorías relacionadas con ese rubro.")
                else:
                    print("Ingrese un rubro.")
            else:
                # Búsqueda normal
                if texto != '':
                    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)
                    if not coincidencias.empty:
                        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                        desplegable = widgets.Dropdown(
                            options=opciones,
                            description='Seleccionar:',
                            style={'description_width': 'initial'},
                            layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                        )
                        display(deplegable)
                        def mostrar_producto_cuando_selecciona(change):
                            if change['name'] == 'value' and change['new']:
                                with output_area:
                                    output_area.clear_output()
                                    html_producto = mostrar_producto_formato_completo(deplegable.value)
                                    display(HTML(html_producto))
                                    display(boton_descargar)
                        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                    else:
                        print("No se encontraron productos con ese nombre.")
                else:
                    display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_rubro.value = False
        entrada_rubro.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')

# Checkbox "Sugerencia x Rubro"
checkbox_rubro = widgets.Checkbox(
    value=False,
    description='Sugerencia x Rubro',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Entrada de rubro (inicialmente oculto)
entrada_rubro = widgets.Text(
    value='',
    placeholder='Ingresá el rubro del comercio',
    description='Rubro:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
entrada_rubro.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_entrada_rubro(change):
    with output_area:
        output_area.clear_output()
    if checkbox_rubro.value:
        entrada_rubro.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_categorias.value = False
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        entrada_rubro.layout.display = 'none'
        entrada_rubro.value = ''
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_rubro.observe(mostrar_ocultar_entrada_rubro, names='value')
entrada_rubro.observe(actualizar_resultados, names='value')

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkbox_categorias, dropdown_categorias, checkbox_rubro, entrada_rubro, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    'papelerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    'kioscos': ['Kioscos', 'Llaveros', 'Squishys', 'Pop-it', 'Accesorios de moda', 'Bijouterie'],
    'minimercados': ['Kioscos', 'Llaveros', 'Squishys', 'Pop-it'],
    'cotillones': ['Cotillon', 'Cotillón Grande', 'Decoración', 'Halloween', 'Vasos Decorativos', 'Globos'],
    'regalerías': ['Accesorios de moda', 'Bazar y Deco', 'Llaveros', 'Vasos', 'Relojes', 'Figuras Coleccionables', 'Peluches'],
    'souvenirs': ['Llaveros', 'Peluches', 'Bazar y Deco', 'Vasos Decorativos', 'Artesanías'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = producto.get('imagen', '')

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa; border-radius: 5px; text-align: left;">
        <h2 style="color: #333; font-size: 24px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h2>
        <p style="font-size: 16px; color: #666; margin-top: 5px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 14px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 14px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:150px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            html_producto = mostrar_producto_formato_completo(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            paginacion = widgets.HBox()
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion.children = botones_paginas
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if not checkbox_categorias.value and not checkbox_rubro.value and texto == '':
            display(super_buscador_img)
        else:
            if checkbox_categorias.value:
                # Mostrar lista por categorías
                categoria_seleccionada = dropdown_categorias.value
                if categoria_seleccionada:
                    df_filtrado = df.copy()
                    # Expandir las categorías en listas
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar alfabéticamente
                    df_filtrado = df_filtrado.sort_values('Nombre')
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, 10)
                else:
                    print("Seleccione una categoría.")
            elif checkbox_rubro.value:
                # Sugerencia por Rubro
                rubro = entrada_rubro.value.strip().lower()
                if rubro:
                    categorias_relacionadas = rubro_a_categorias.get(rubro, [])
                    if categorias_relacionadas:
                        df_filtrado = df.copy()
                        df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                        df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: any(cat in categorias_relacionadas for cat in cats) if isinstance(cats, list) else False)]
                        # Ordenar por fecha de creación (más recientes primero)
                        df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False)
                        # Mostrar lista paginada
                        mostrar_lista_productos(df_filtrado, 1, 10)
                    else:
                        print("No se encontraron categorías relacionadas con ese rubro.")
                else:
                    print("Ingrese un rubro.")
            else:
                # Búsqueda normal
                if texto != '':
                    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)
                    if not coincidencias.empty:
                        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                        desplegable = widgets.Dropdown(
                            options=opciones,
                            description='Seleccionar:',
                            style={'description_width': 'initial'},
                            layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                        )
                        display(desplegable)
                        def mostrar_producto_cuando_selecciona(change):
                            if change['name'] == 'value' and change['new']:
                                with output_area:
                                    output_area.clear_output()
                                    html_producto = mostrar_producto_formato_completo(desplegable.value)
                                    display(HTML(html_producto))
                                    display(boton_descargar)
                        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                    else:
                        print("No se encontraron productos con ese nombre.")
                else:
                    display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_rubro.value = False
        entrada_rubro.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')

# Checkbox "Sugerencia x Rubro"
checkbox_rubro = widgets.Checkbox(
    value=False,
    description='Sugerencia x Rubro',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Entrada de rubro (inicialmente oculto)
entrada_rubro = widgets.Text(
    value='',
    placeholder='Ingresá el rubro del comercio',
    description='Rubro:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
entrada_rubro.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_entrada_rubro(change):
    with output_area:
        output_area.clear_output()
    if checkbox_rubro.value:
        entrada_rubro.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_categorias.value = False
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        entrada_rubro.layout.display = 'none'
        entrada_rubro.value = ''
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_rubro.observe(mostrar_ocultar_entrada_rubro, names='value')
entrada_rubro.observe(actualizar_resultados, names='value')

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkbox_categorias, dropdown_categorias, checkbox_rubro, entrada_rubro, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    'papelerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    'kioscos': ['Kioscos', 'Llaveros', 'Squishys', 'Pop-it', 'Accesorios de moda', 'Bijouterie'],
    'minimercados': ['Kioscos', 'Llaveros', 'Squishys', 'Pop-it'],
    'cotillones': ['Cotillon', 'Cotillón Grande', 'Decoración', 'Halloween', 'Vasos Decorativos', 'Globos'],
    'regalerías': ['Accesorios de moda', 'Bazar y Deco', 'Llaveros', 'Vasos', 'Relojes', 'Figuras Coleccionables', 'Peluches'],
    'souvenirs': ['Llaveros', 'Peluches', 'Bazar y Deco', 'Vasos Decorativos', 'Artesanías'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para mostrar el producto seleccionado con el estilo visual mejorado (RESTABLECIDO)
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = producto.get('imagen', '')

    # Diseño HTML RESTABLECIDO (imagen más grande)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 20px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 2px 2px 8px #aaaaaa; border-radius: 5px; text-align: center;">
        <h2 style="color: #333; font-size: 28px; margin-bottom: 10px;">{producto.get('Nombre', 'Sin datos')}</h2>
        <p style="font-size: 18px; color: #666; margin-top: 5px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <img src="{img_url}" style="width:300px; height: auto; border-radius: 4px; margin: 15px 0;" alt="Imagen del producto">
        <p style="font-size: 16px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
        <p style="font-size: 16px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
        <p style="font-size: 14px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
        <p style="font-size: 14px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
        <p style="font-size: 14px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
        <p style="font-size: 14px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
    </div>
    """
    return html_content

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    stock = producto.get('Stock', 'Sin datos')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = producto.get('Precio Jugueterias face', 0)
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = producto.get('forzar multiplos', "Sin datos")
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face

    precio_mayorista = producto.get('Precio', 'Sin datos')
    unidades_por_bulto = producto.get('unidad por bulto', 'Sin datos')

    img_url = producto.get('imagen', '')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa; border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{producto.get('Nombre', 'Sin datos')}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {producto.get('Codigo', 'Sin datos')}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio Caja/Venta: ${precio_caja_venta}</p>
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y rubros)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            paginacion = widgets.HBox()
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion.children = botones_paginas
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if not checkbox_categorias.value and not checkbox_rubro.value and texto == '':
            display(super_buscador_img)
        else:
            if checkbox_categorias.value:
                # Mostrar lista por categorías
                categoria_seleccionada = dropdown_categorias.value
                if categoria_seleccionada:
                    df_filtrado = df.copy()
                    # Expandir las categorías en listas
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar alfabéticamente
                    df_filtrado = df_filtrado.sort_values('Nombre')
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, 10)
                else:
                    print("Seleccione una categoría.")
            elif checkbox_rubro.value:
                # Sugerencia por Rubro
                rubro = entrada_rubro.value.strip().lower()
                if rubro:
                    categorias_relacionadas = rubro_a_categorias.get(rubro, [])
                    if categorias_relacionadas:
                        df_filtrado = df.copy()
                        df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                        df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: any(cat in categorias_relacionadas for cat in cats) if isinstance(cats, list) else False)]
                        # Ordenar por fecha de creación (más recientes primero)
                        df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False)
                        # Mostrar lista paginada
                        mostrar_lista_productos(df_filtrado, 1, 10)
                    else:
                        print("No se encontraron categorías relacionadas con ese rubro.")
                else:
                    print("Ingrese un rubro.")
            else:
                # Búsqueda normal
                if texto != '':
                    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)
                    if not coincidencias.empty:
                        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                        desplegable = widgets.Dropdown(
                            options=opciones,
                            description='Seleccionar:',
                            style={'description_width': 'initial'},
                            layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                        )
                        display(desplegable)
                        def mostrar_producto_cuando_selecciona(change):
                            if change['name'] == 'value' and change['new']:
                                with output_area:
                                    output_area.clear_output()
                                    html_producto = mostrar_producto_formato_completo(desplegable.value)
                                    display(HTML(html_producto))
                                    display(boton_descargar)
                        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                    else:
                        print("No se encontraron productos con ese nombre.")
                else:
                    display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='5px auto')
)

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='5px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_rubro.value = False
        entrada_rubro.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')

# Checkbox "Sugerencia x Rubro" (ahora colocado después de "Ver lista por Categorías")
checkbox_rubro = widgets.Checkbox(
    value=False,
    description='Sugerencia x Rubro',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='5px auto')
)

# Entrada de rubro (inicialmente oculto)
entrada_rubro = widgets.Text(
    value='',
    placeholder='Ingresá el rubro del comercio',
    description='Rubro:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='5px auto')
)
entrada_rubro.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_entrada_rubro(change):
    with output_area:
        output_area.clear_output()
    if checkbox_rubro.value:
        entrada_rubro.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_categorias.value = False
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        entrada_rubro.layout.display = 'none'
        entrada_rubro.value = ''
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_rubro.observe(mostrar_ocultar_entrada_rubro, names='value')
entrada_rubro.observe(actualizar_resultados, names='value')

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkbox_categorias, dropdown_categorias, checkbox_rubro, entrada_rubro, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Variable global para controlar la visualización de la ubicación
mostrar_ubicacion = False

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para manejar el cambio en la casilla de "Mostrar Ubicación"
def actualizar_mostrar_ubicacion(change):
    global mostrar_ubicacion
    mostrar_ubicacion = checkbox_ubicacion.value
    if producto_seleccionado:
        with output_area:
            output_area.clear_output()
            html_producto = mostrar_producto_formato_completo(producto_seleccionado)
            display(HTML(html_producto))
            display(boton_descargar)

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)
checkbox_ubicacion.observe(actualizar_mostrar_ubicacion, names='value')

# Función para mostrar el producto seleccionado con el estilo visual mejorado
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto, manejando NaN y valores faltantes
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    descripcion = obtener_valor('Descripción')
    stock = obtener_valor('Stock')
    stock_color = "green"
    try:
        stock_valor = float(stock)
        if stock_valor < 5:
            stock_color = "red"
    except:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: Sin datos"
        venta_forzada_color = "black"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    pasillo = obtener_valor('Pasillo')
    estante = obtener_valor('Estante')
    proveedor = obtener_valor('Proveedor')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor('imagen')

    # Aumentar el tamaño de la imagen en un 25%
    imagen_ancho = 300 * 1.25  # Originalmente era 300px

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 20px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 2px 2px 8px #aaaaaa; border-radius: 5px; text-align: left;">
        <h2 style="color: #333; font-size: 28px; margin-bottom: 10px; text-align: center;">{obtener_valor('Nombre')}</h2>
        <p style="font-size: 18px; color: #666; margin-top: 5px; text-align: center;"><strong>Código:</strong> {obtener_valor('Codigo')}</p>
        <div style="display: flex; justify-content: space-between; align-items: flex-start;">
            <div style="flex: 1; padding-right: 20px;">
                <p style="font-size: 16px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 14px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                {"<p style='font-size: 14px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 14px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 14px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
                {f"<p style='font-size: 14px;'><strong>Pasillo:</strong> {pasillo}</p>" if mostrar_ubicacion else ""}
                {f"<p style='font-size: 14px;'><strong>Estante:</strong> {estante}</p>" if mostrar_ubicacion else ""}
                {f"<p style='font-size: 14px;'><strong>Proveedor:</strong> {proveedor}</p>" if mostrar_ubicacion else ""}
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# El resto del código permanece igual...
# (Funciones para mostrar listas, actualizar resultados, widgets, etc.)

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    # Igual que antes, pero asegurándose de manejar los NaN y 'Sin datos'
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    stock_color = "green"
    try:
        stock_valor = float(stock)
        if stock_valor < 5:
            stock_color = "red"
    except:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: Sin datos"
        venta_forzada_color = "black"
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')
    img_url = obtener_valor('imagen')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa; border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{obtener_valor('Nombre')}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {obtener_valor('Codigo')}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# El resto de funciones (mostrar_lista_productos, actualizar_resultados, etc.) permanecen igual

# ...

# Al final, recuerda mostrar la casilla de verificación 'Mostrar Ubicación' junto con el botón 'Descargar imagen'

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkbox_categorias, dropdown_categorias, checkbox_rubro, entrada_rubro, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Variable global para controlar la visualización de la ubicación
mostrar_ubicacion = False

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para manejar el cambio en la casilla de "Mostrar Ubicación"
def actualizar_mostrar_ubicacion(change):
    global mostrar_ubicacion
    mostrar_ubicacion = checkbox_ubicacion.value
    if producto_seleccionado:
        with output_area:
            output_area.clear_output()
            mostrar_producto_formato_completo(producto_seleccionado)
            display(checkbox_ubicacion)
            display(boton_descargar)

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)
checkbox_ubicacion.observe(actualizar_mostrar_ubicacion, names='value')

# Función para mostrar el producto seleccionado con el estilo visual preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto, manejando NaN y valores faltantes
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')  # Asegúrate de que la columna se llame 'Descripción'
    categorias = obtener_valor('Categorias')
    pasillo = obtener_valor('Pasillo')
    estante = obtener_valor('Estante')
    proveedor = obtener_valor('Proveedor')
    codigo = obtener_valor('Codigo')
    nombre = obtener_valor('Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor('imagen')

    # Aumentar el tamaño de la imagen en un 25%
    imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código

    # Diseño HTML preferido
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
                {f"<p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}, <strong>Estante:</strong> {estante}</p>" if mostrar_ubicacion else ""}
                {f"<p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>" if mostrar_ubicacion else ""}
            </div>
        </div>
    </div>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        display(checkbox_ubicacion)
        display(boton_descargar)

# El resto del código permanece igual...

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    # Igual que antes, pero asegurándose de manejar los NaN y 'Sin datos'
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    stock_color = "green"
    try:
        stock_valor = float(stock)
        if stock_valor < 5:
            stock_color = "red"
    except:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: No"
            venta_forzada_color = "green"
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: No"
        venta_forzada_color = "green"
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')
    img_url = obtener_valor('imagen')
    nombre = obtener_valor('Nombre')
    codigo = obtener_valor('Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa; border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};">Stock: {stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};">{venta_forzada_texto}</p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y rubros)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            paginacion = widgets.HBox()
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion.children = botones_paginas
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if not checkbox_categorias.value and not checkbox_rubro.value and texto == '':
            display(super_buscador_img)
        else:
            if checkbox_categorias.value:
                # Mostrar lista por categorías
                categoria_seleccionada = dropdown_categorias.value
                if categoria_seleccionada:
                    df_filtrado = df.copy()
                    # Expandir las categorías en listas
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar alfabéticamente
                    df_filtrado = df_filtrado.sort_values('Nombre')
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, 10)
                else:
                    print("Seleccione una categoría.")
            elif checkbox_rubro.value:
                # Sugerencia por Rubro
                rubro = entrada_rubro.value.strip().lower()
                if rubro:
                    categorias_relacionadas = rubro_a_categorias.get(rubro, [])
                    if categorias_relacionadas:
                        df_filtrado = df.copy()
                        df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                        df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: any(cat in categorias_relacionadas for cat in cats) if isinstance(cats, list) else False)]
                        # Ordenar por fecha de creación (más recientes primero)
                        df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False)
                        # Mostrar lista paginada
                        mostrar_lista_productos(df_filtrado, 1, 10)
                    else:
                        print("No se encontraron categorías relacionadas con ese rubro.")
                else:
                    print("Ingrese un rubro.")
            else:
                # Búsqueda normal
                if texto != '':
                    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)
                    if not coincidencias.empty:
                        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                        desplegable = widgets.Dropdown(
                            options=opciones,
                            description='Seleccionar:',
                            style={'description_width': 'initial'},
                            layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                        )
                        display(desplegable)
                        def mostrar_producto_cuando_selecciona(change):
                            if change['name'] == 'value' and change['new']:
                                with output_area:
                                    output_area.clear_output()
                                    mostrar_producto_formato_completo(desplegable.value)
                                    display(checkbox_ubicacion)
                                    display(boton_descargar)
                        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                    else:
                        print("No se encontraron productos con ese nombre.")
                else:
                    display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='5px auto')
)

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='5px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_rubro.value = False
        entrada_rubro.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')

# Checkbox "Sugerencia x Rubro"
checkbox_rubro = widgets.Checkbox(
    value=False,
    description='Sugerencia x Rubro',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='5px auto')
)

# Entrada de rubro (inicialmente oculto)
entrada_rubro = widgets.Text(
    value='',
    placeholder='Ingresá el rubro del comercio',
    description='Rubro:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='5px auto')
)
entrada_rubro.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_entrada_rubro(change):
    with output_area:
        output_area.clear_output()
    if checkbox_rubro.value:
        entrada_rubro.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_categorias.value = False
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        entrada_rubro.layout.display = 'none'
        entrada_rubro.value = ''
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_rubro.observe(mostrar_ocultar_entrada_rubro, names='value')
entrada_rubro.observe(actualizar_resultados, names='value')

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto', justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto', justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkbox_categorias, dropdown_categorias, checkbox_rubro, entrada_rubro, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto, manejando NaN y valores faltantes
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')  # Asegúrate de que la columna se llame 'Descripción'
    categorias = obtener_valor('Categorias')
    pasillo = obtener_valor('Pasillo')
    estante = obtener_valor('Estante')
    proveedor = obtener_valor('Proveedor')
    codigo = obtener_valor('Codigo')
    nombre = obtener_valor('Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor('imagen')

    # Aumentar el tamaño de la imagen en un 25%
    imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código

    # Crear el HTML para la ubicación, inicialmente oculto
    ubicacion_html = f"""
    <div id="ubicacion_info" style="display: none;">
        <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}, <strong>Estante:</strong> {estante}</p>
        <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
    </div>
    """

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%; font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa; border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 20px;">{stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
                <!-- Checkbox 'Mostrar Ubicación' dentro del cuadro de resultado -->
                <label style="font-size: 16px;"><input type="checkbox" id="mostrar_ubicacion_checkbox"> Mostrar Ubicación</label>
                {ubicacion_html}
            </div>
        </div>
    </div>
    <script>
    document.getElementById('mostrar_ubicacion_checkbox').addEventListener('change', function() {{
        var ubicacionDiv = document.getElementById('ubicacion_info');
        if (this.checked) {{
            ubicacionDiv.style.display = 'block';
        }} else {{
            ubicacionDiv.style.display = 'none';
        }}
    }});
    </script>
    """
    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el botón "Descargar imagen" aquí
        display(boton_descargar)

# El resto del código permanece igual...

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    # Igual que antes, pero asegurándose de manejar los NaN y 'Sin datos'
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    stock_color = "green"
    try:
        stock_valor = float(stock)
        if stock_valor < 5:
            stock_color = "red"
    except:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')
    img_url = obtener_valor('imagen')
    nombre = obtener_valor('Nombre')
    codigo = obtener_valor('Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%; font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa; border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Resto del código para las funciones de actualización, widgets, etc.

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkbox_categorias, dropdown_categorias, checkbox_rubro, entrada_rubro, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto, manejando NaN y valores faltantes
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')  # Asegúrate de que la columna se llame 'Descripción'
    categorias = obtener_valor('Categorias')
    pasillo = obtener_valor('Pasillo')
    estante = obtener_valor('Estante')
    proveedor = obtener_valor('Proveedor')
    codigo = obtener_valor('Codigo')
    nombre = obtener_valor('Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor('imagen')

    # Aumentar el tamaño de la imagen en un 25%
    imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}, <strong>Estante:</strong> {estante}</p>
        <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 20px;">{stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
                {ubicacion_html}
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón aquí
        display(checkbox_ubicacion)
        display(boton_descargar)

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    # Igual que antes, pero asegurándose de manejar los NaN y 'Sin datos'
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    stock_color = "green"
    try:
        stock_valor = float(stock)
        if stock_valor < 5:
            stock_color = "red"
    except:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')
    img_url = obtener_valor('imagen')
    nombre = obtener_valor('Nombre')
    codigo = obtener_valor('Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y rubros)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            paginacion = widgets.HBox()
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion.children = botones_paginas
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if not checkbox_categorias.value and not checkbox_rubro.value and texto == '':
            display(super_buscador_img)
        else:
            if checkbox_categorias.value:
                # Mostrar lista por categorías
                categoria_seleccionada = dropdown_categorias.value
                if categoria_seleccionada:
                    df_filtrado = df.copy()
                    # Expandir las categorías en listas
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar alfabéticamente
                    df_filtrado = df_filtrado.sort_values('Nombre')
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, 10)
                else:
                    print("Seleccione una categoría.")
            elif checkbox_rubro.value:
                # Sugerencia por Rubro
                rubro = entrada_rubro.value.strip().lower()
                if rubro:
                    categorias_relacionadas = rubro_a_categorias.get(rubro, [])
                    if categorias_relacionadas:
                        df_filtrado = df.copy()
                        df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                        df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: any(cat in categorias_relacionadas for cat in cats) if isinstance(cats, list) else False)]
                        # Ordenar por fecha de creación (más recientes primero)
                        df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False)
                        # Mostrar lista paginada
                        mostrar_lista_productos(df_filtrado, 1, 10)
                    else:
                        print("No se encontraron categorías relacionadas con ese rubro.")
                else:
                    print("Ingrese un rubro.")
            else:
                # Búsqueda normal
                if texto != '':
                    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)].head(5)
                    if not coincidencias.empty:
                        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                        desplegable = widgets.Dropdown(
                            options=opciones,
                            description='Seleccionar:',
                            style={'description_width': 'initial'},
                            layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                        )
                        display(deplegable)
                        def mostrar_producto_cuando_selecciona(change):
                            if change['name'] == 'value' and change['new']:
                                with output_area:
                                    output_area.clear_output()
                                    # Reiniciar el estado del checkbox
                                    checkbox_ubicacion.value = False
                                    mostrar_producto_formato_completo(deplegable.value)
                        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                    else:
                        print("No se encontraron productos con ese nombre.")
                else:
                    display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='5px auto')
)

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='5px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_rubro.value = False
        entrada_rubro.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')

# Checkbox "Sugerencia x Rubro"
checkbox_rubro = widgets.Checkbox(
    value=False,
    description='Sugerencia x Rubro',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='5px auto')
)

# Entrada de rubro (inicialmente oculto)
entrada_rubro = widgets.Text(
    value='',
    placeholder='Ingresá el rubro del comercio',
    description='Rubro:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='5px auto')
)
entrada_rubro.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_entrada_rubro(change):
    with output_area:
        output_area.clear_output()
    if checkbox_rubro.value:
        entrada_rubro.layout.display = 'block'
        # Desactivar otros widgets
        checkbox_categorias.value = False
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
    else:
        entrada_rubro.layout.display = 'none'
        entrada_rubro.value = ''
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_rubro.observe(mostrar_ocultar_entrada_rubro, names='value')
entrada_rubro.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto',
                          justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkbox_categorias, dropdown_categorias, checkbox_rubro, entrada_rubro, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto, manejando NaN y valores faltantes
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')  # Asegúrate de que la columna se llame 'Descripción'
    categorias = obtener_valor('Categorias')
    pasillo = obtener_valor('Pasillo')
    estante = obtener_valor('Estante')
    proveedor = obtener_valor('Proveedor')
    codigo = obtener_valor('Codigo')
    nombre = obtener_valor('Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor('imagen')

    # Aumentar el tamaño de la imagen en un 25%
    imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}, <strong>Estante:</strong> {estante}</p>
        <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 20px;">{stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
                {ubicacion_html}
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón aquí
        display(checkbox_ubicacion)
        display(boton_descargar)

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    # Igual que antes, pero asegurándose de manejar los NaN y 'Sin datos'
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    stock_color = "green"
    try:
        stock_valor = float(stock)
        if stock_valor < 5:
            stock_color = "red"
    except:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')
    img_url = obtener_valor('imagen')
    nombre = obtener_valor('Nombre')
    codigo = obtener_valor('Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y rubros)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            paginacion = widgets.HBox()
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion.children = botones_paginas
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if not checkbox_categorias.value and texto == '':
            display(super_buscador_img)
        else:
            if checkbox_categorias.value:
                # Mostrar lista por categorías
                categoria_seleccionada = dropdown_categorias.value
                if categoria_seleccionada:
                    df_filtrado = df.copy()
                    # Expandir las categorías en listas
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar según el checkbox "Ordenar x Novedad"
                    if checkbox_ordenar_novedad.value:
                        df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False)
                        df_filtrado = df_filtrado.head(100)  # Mostrar los primeros 100 productos
                        productos_por_pagina = 25
                    else:
                        df_filtrado = df_filtrado.sort_values('Nombre')
                        productos_por_pagina = 10
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
                else:
                    print("Seleccione una categoría.")
            else:
                # Búsqueda normal
                if texto != '':
                    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)]
                    if checkbox_ordenar_novedad.value:
                        coincidencias = coincidencias.sort_values('Fecha Creado', ascending=False)
                    else:
                        coincidencias = coincidencias.sort_values('Nombre')
                    coincidencias = coincidencias.head(5)
                    if not coincidencias.empty:
                        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                        desplegable = widgets.Dropdown(
                            options=opciones,
                            description='Seleccionar:',
                            style={'description_width': 'initial'},
                            layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                        )
                        display(desplegable)
                        def mostrar_producto_cuando_selecciona(change):
                            if change['name'] == 'value' and change['new']:
                                with output_area:
                                    output_area.clear_output()
                                    # Reiniciar el estado del checkbox
                                    checkbox_ubicacion.value = False
                                    mostrar_producto_formato_completo(desplegable.value)
                        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                    else:
                        print("No se encontraron productos con ese nombre.")
                else:
                    display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='5px auto')
)

# Checkbox "Ordenar x Novedad"
checkbox_ordenar_novedad = widgets.Checkbox(
    value=False,
    description='Ordenar x Novedad',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='5px auto')
)

# Checkbox "Sugerir x Rubro (Próximamente)"
checkbox_sugerir_rubro = widgets.Checkbox(
    value=False,
    description='Sugerir x Rubro (Próximamente)',
    disabled=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='5px auto')
)

# Agrupar los checkboxes con espacios
checkboxes_vbox = widgets.VBox([
    checkbox_categorias,
    widgets.Label(value=''),
    widgets.Label(value=''),
    widgets.Label(value=''),
    checkbox_ordenar_novedad,
    widgets.Label(value=''),
    widgets.Label(value=''),
    checkbox_sugerir_rubro
], layout=widgets.Layout(align_items='center'))

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='5px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')
checkbox_ordenar_novedad.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto',
                          justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkboxes_vbox, dropdown_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='50%', margin='10px auto')
)

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url:
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Botón para abrir la imagen en el navegador (no se muestra inicialmente)
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto, manejando NaN y valores faltantes
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')  # Asegúrate de que la columna se llame 'Descripción'
    categorias = obtener_valor('Categorias')
    pasillo = obtener_valor('Pasillo')
    estante = obtener_valor('Estante')
    proveedor = obtener_valor('Proveedor')
    codigo = obtener_valor('Codigo')
    nombre = obtener_valor('Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor('imagen')

    # Aumentar el tamaño de la imagen en un 25%
    imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}, <strong>Estante:</strong> {estante}</p>
        <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px; text-align: center;">
        <h1 style="color: #333; text-align: center; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
        <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 15px; margin-top: 15px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left;">
                <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 20px;">{stock}</p>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: right; padding-right: 20px;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
                {ubicacion_html}
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón aquí
        display(checkbox_ubicacion)
        display(boton_descargar)

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    # Igual que antes, pero asegurándose de manejar los NaN y 'Sin datos'
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    stock_color = "green"
    try:
        stock_valor = float(stock)
        if stock_valor < 5:
            stock_color = "red"
    except:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')
    img_url = obtener_valor('imagen')
    nombre = obtener_valor('Nombre')
    codigo = obtener_valor('Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y novedades)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            paginacion = widgets.HBox()
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion.children = botones_paginas
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if not checkbox_categorias.value and texto == '':
            if checkbox_ordenar_novedad.value:
                # Mostrar los 100 productos más recientes
                df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
                productos_por_pagina = 25
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                display(super_buscador_img)
        else:
            if checkbox_categorias.value:
                # Mostrar lista por categorías
                categoria_seleccionada = dropdown_categorias.value
                if categoria_seleccionada:
                    df_filtrado = df.copy()
                    # Expandir las categorías en listas
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar según el checkbox "Ordenar x Novedad"
                    if checkbox_ordenar_novedad.value:
                        df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False)
                    else:
                        df_filtrado = df_filtrado.sort_values('Nombre')
                    productos_por_pagina = 25 if checkbox_ordenar_novedad.value else 10
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
                else:
                    print("Seleccione una categoría.")
            else:
                # Búsqueda normal
                if texto != '':
                    coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)]
                    if checkbox_ordenar_novedad.value:
                        coincidencias = coincidencias.sort_values('Fecha Creado', ascending=False)
                    else:
                        coincidencias = coincidencias.sort_values('Nombre')
                    coincidencias = coincidencias.head(5)
                    if not coincidencias.empty:
                        opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                        desplegable = widgets.Dropdown(
                            options=opciones,
                            description='Seleccionar:',
                            style={'description_width': 'initial'},
                            layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                        )
                        display(desplegable)
                        def mostrar_producto_cuando_selecciona(change):
                            if change['name'] == 'value' and change['new']:
                                with output_area:
                                    output_area.clear_output()
                                    # Reiniciar el estado del checkbox
                                    checkbox_ubicacion.value = False
                                    mostrar_producto_formato_completo(desplegable.value)
                        desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                    else:
                        print("No se encontraron productos con ese nombre.")
                else:
                    display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Ordenar x Novedad"
checkbox_ordenar_novedad = widgets.Checkbox(
    value=False,
    description='Ordenar x Novedad',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Sugerir x Rubro (Próximamente)"
checkbox_sugerir_rubro = widgets.Checkbox(
    value=False,
    description='Sugerir x Rubro (Próximamente)',
    disabled=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 0 0 0')
)

# Agrupar los checkboxes en una línea horizontal
checkboxes_hbox = widgets.HBox([
    checkbox_categorias,
    checkbox_ordenar_novedad,
    checkbox_sugerir_rubro
], layout=widgets.Layout(justify_content='center', align_items='center'))

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='5px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        with output_area:
            output_area.clear_output()
            if checkbox_ordenar_novedad.value:
                actualizar_resultados(None)
            else:
                display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')
checkbox_ordenar_novedad.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto',
                          justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkboxes_hbox, dropdown_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Cargar tu DataFrame 'df' con tus datos
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    # Aquí va el diccionario completo que hemos creado anteriormente
    # Asegúrate de copiar todo el diccionario aquí
    # ...
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='10px 0')
)

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url and img_url != 'Sin datos':
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Botón para abrir la imagen en el navegador
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto, manejando NaN y valores faltantes
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')  # Asegúrate de que la columna se llame 'Descripción'
    categorias = obtener_valor('Categorias')
    pasillo = obtener_valor('Pasillo')
    estante = obtener_valor('Estante')
    proveedor = obtener_valor('Proveedor')
    codigo = obtener_valor('Codigo')
    nombre = obtener_valor('Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor('imagen')

    # Aumentar el tamaño de la imagen en un 25%
    imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}, <strong>Estante:</strong> {estante}</p>
        <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado con separación de secciones y mejor disposición
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px;">
        <!-- Sección Superior -->
        <div style="text-align: center;">
            <h1 style="color: #333; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
            <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
            <hr style="margin: 10px 0;">
        </div>
        <div style="display: flex; justify-content: center; align-items: flex-start; margin-top: 10px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left; flex: 1;">
                <div style="margin-bottom: 10px;">
                    <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                    <p style="font-size: 20px; margin-top: -10px;">{stock}</p>
                </div>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        <hr style="margin: 15px 0;">
        <!-- Sección Inferior -->
        <div style="display: flex; justify-content: space-between;">
            <div style="text-align: left; padding-left: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: left; padding-right: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
                {ubicacion_html}
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón aquí
        display(checkbox_ubicacion)
        display(boton_descargar)

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    # Igual que antes, pero asegurándose de manejar los NaN y 'Sin datos'
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    stock_color = "green"
    try:
        stock_valor = float(stock)
        if stock_valor < 5:
            stock_color = "red"
    except:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')
    img_url = obtener_valor('imagen')
    nombre = obtener_valor('Nombre')
    codigo = obtener_valor('Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y novedades)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion = widgets.HBox(botones_paginas, layout=widgets.Layout(justify_content='center'))
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if checkbox_ordenar_novedad.value and not checkbox_categorias.value and texto == '':
            # Mostrar los 100 productos más recientes
            df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
            productos_por_pagina = 25
            mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
        elif checkbox_categorias.value:
            # Mostrar lista por categorías
            categoria_seleccionada = dropdown_categorias.value
            if categoria_seleccionada:
                df_filtrado = df.copy()
                # Expandir las categorías en listas
                df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                # Filtrar los productos que pertenecen a la categoría seleccionada
                df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                # Ordenar según el checkbox "Ordenar x Novedad"
                if checkbox_ordenar_novedad.value:
                    df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False).head(100)
                    productos_por_pagina = 25
                else:
                    df_filtrado = df_filtrado.sort_values('Nombre')
                    productos_por_pagina = 10
                # Mostrar lista paginada
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                print("Seleccione una categoría.")
        elif texto != '':
            # Búsqueda normal
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)]
            if checkbox_ordenar_novedad.value:
                coincidencias = coincidencias.sort_values('Fecha Creado', ascending=False).head(100)
            else:
                coincidencias = coincidencias.sort_values('Nombre').head(10)
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)
                def mostrar_producto_cuando_selecciona(change):
                    if change['name'] == 'value' and change['new']:
                        with output_area:
                            output_area.clear_output()
                            # Reiniciar el estado del checkbox
                            checkbox_ubicacion.value = False
                            mostrar_producto_formato_completo(desplegable.value)
                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")
        else:
            # Mostrar imagen del "Super Buscador" si no hay criterios de búsqueda
            if checkbox_ordenar_novedad.value:
                # Mostrar los 100 productos más recientes
                df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
                productos_por_pagina = 25
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Ordenar x Novedad"
checkbox_ordenar_novedad = widgets.Checkbox(
    value=False,
    description='Ordenar x Novedad',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Sugerir x Rubro (Próximamente)"
checkbox_sugerir_rubro = widgets.Checkbox(
    value=False,
    description='Sugerir x Rubro (Próximamente)',
    disabled=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 0 0 0')
)

# Agrupar los checkboxes en una línea horizontal con espacios
checkboxes_hbox = widgets.HBox([
    checkbox_categorias,
    checkbox_ordenar_novedad,
    checkbox_sugerir_rubro
], layout=widgets.Layout(justify_content='center', align_items='center'))

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        if checkbox_ordenar_novedad.value:
            actualizar_resultados(None)
        else:
            with output_area:
                output_area.clear_output()
                display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')
checkbox_ordenar_novedad.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto',
                          justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkboxes_hbox, dropdown_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output

# Supongamos que ya tienes tu DataFrame 'df' cargado correctamente
# Asegúrate de que el DataFrame incluye las columnas necesarias
# Por ejemplo:
# df = pd.read_csv('tu_archivo.csv')  # Ajusta la ruta según corresponda

# Convertir la columna 'Fecha Creado' a datetime si no lo está
df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
    todas_categorias = set()
    for lista_cats in categorias_series:
        todas_categorias.update(lista_cats)
    return sorted(todas_categorias)

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='10px 0')
)

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url and img_url != 'Sin datos':
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Botón para abrir la imagen en el navegador
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto, manejando NaN y valores faltantes
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    # Asegúrate de que el nombre de la columna sea exactamente 'Descripción' o 'Descripcion'
    descripcion = obtener_valor('Descripción')  # Verifica el nombre exacto en tu DataFrame
    categorias = obtener_valor('Categorias')
    pasillo = obtener_valor('Pasillo')
    estante = obtener_valor('Estante')
    proveedor = obtener_valor('Proveedor')
    codigo = obtener_valor('Codigo')
    nombre = obtener_valor('Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor('imagen')

    # Aumentar el tamaño de la imagen en un 25%
    imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <div style="display: flex; justify-content: flex-start; align-items: center; gap: 20px;">
            <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}</p>
            <p style='font-size: 16px;'><strong>Estante:</strong> {estante}</p>
            <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        </div>
        <hr style="margin-top: 10px;">
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado con separación de secciones y mejor disposición
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px;">
        <!-- Sección Superior -->
        <div style="text-align: center;">
            <h1 style="color: #333; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
            <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
            <hr style="margin: 10px 0;">
        </div>
        <div style="display: flex; justify-content: center; align-items: flex-start; margin-top: 10px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left; flex: 1;">
                <div style="margin-bottom: 10px;">
                    <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                    <p style="font-size: 20px; margin-top: -10px;">{stock}</p>
                </div>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        {ubicacion_html}
        <!-- Sección Inferior -->
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: left; padding-right: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón aquí
        display(checkbox_ubicacion)
        display(boton_descargar)

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    # Igual que antes, pero asegurándose de manejar los NaN y 'Sin datos'
    def obtener_valor(campo):
        valor = producto.get(campo, 'Sin datos')
        if pd.isna(valor) or valor == '':
            return 'Sin datos'
        return valor

    stock = obtener_valor('Stock')
    stock_color = "green"
    try:
        stock_valor = float(stock)
        if stock_valor < 5:
            stock_color = "red"
    except:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor('Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor('forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor('Precio')
    unidades_por_bulto = obtener_valor('unidad por bulto')
    descripcion = obtener_valor('Descripción')  # Asegúrate de que la columna se llame 'Descripción' o 'Descripcion'
    img_url = obtener_valor('imagen')
    nombre = obtener_valor('Nombre')
    codigo = obtener_valor('Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y novedades)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                def on_boton_click(b, i=i):
                    mostrar_lista_productos(df_productos, i, productos_por_pagina)
                boton.on_click(on_boton_click)
                botones_paginas.append(boton)
            paginacion = widgets.HBox(botones_paginas, layout=widgets.Layout(justify_content='center'))
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if checkbox_ordenar_novedad.value and not checkbox_categorias.value and texto == '':
            # Mostrar los 100 productos más recientes
            df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
            productos_por_pagina = 25
            mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
        elif checkbox_categorias.value:
            # Mostrar lista por categorías
            categoria_seleccionada = dropdown_categorias.value
            if categoria_seleccionada:
                df_filtrado = df.copy()
                # Expandir las categorías en listas
                df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                # Filtrar los productos que pertenecen a la categoría seleccionada
                df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                # Ordenar según el checkbox "Ordenar x Novedad"
                if checkbox_ordenar_novedad.value:
                    df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False).head(100)
                    productos_por_pagina = 25
                else:
                    df_filtrado = df_filtrado.sort_values('Nombre')
                    productos_por_pagina = 10
                # Mostrar lista paginada
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                print("Seleccione una categoría.")
        elif texto != '':
            # Búsqueda normal
            coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)]
            if checkbox_ordenar_novedad.value:
                coincidencias = coincidencias.sort_values('Fecha Creado', ascending=False).head(100)
            else:
                coincidencias = coincidencias.sort_values('Nombre').head(10)
            if not coincidencias.empty:
                opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                desplegable = widgets.Dropdown(
                    options=opciones,
                    description='Seleccionar:',
                    style={'description_width': 'initial'},
                    layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                )
                display(desplegable)
                def mostrar_producto_cuando_selecciona(change):
                    if change['name'] == 'value' and change['new']:
                        with output_area:
                            output_area.clear_output()
                            # Reiniciar el estado del checkbox
                            checkbox_ubicacion.value = False
                            mostrar_producto_formato_completo(desplegable.value)
                desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
            else:
                print("No se encontraron productos con ese nombre.")
        else:
            # Mostrar imagen del "Super Buscador" si no hay criterios de búsqueda
            if checkbox_ordenar_novedad.value:
                # Mostrar los 100 productos más recientes
                df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
                productos_por_pagina = 25
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                display(super_buscador_img)

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Ordenar x Novedad"
checkbox_ordenar_novedad = widgets.Checkbox(
    value=False,
    description='Ordenar x Novedad',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Sugerir x Rubro (Próximamente)"
checkbox_sugerir_rubro = widgets.Checkbox(
    value=False,
    description='Sugerir x Rubro (Próximamente)',
    disabled=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 0 0 0')
)

# Agrupar los checkboxes en una línea horizontal con espacios
checkboxes_hbox = widgets.HBox([
    checkbox_categorias,
    checkbox_ordenar_novedad,
    checkbox_sugerir_rubro
], layout=widgets.Layout(justify_content='center', align_items='center'))

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        if checkbox_ordenar_novedad.value:
            actualizar_resultados(None)
        else:
            with output_area:
                output_area.clear_output()
                display(super_buscador_img)

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')
checkbox_ordenar_novedad.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
super_buscador_img = widgets.Image(
    value=open('/content/sample_data/bot (8).png', 'rb').read(),
    format='png',
    layout=widgets.Layout(width='50%', margin='20px auto',
                          justify_content='center', display='flex', align_items='center')
)

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkboxes_hbox, dropdown_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    display(super_buscador_img)

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output
import os

# Ruta del archivo de Excel
ruta_excel = '/content/1083 productos al 24 de sep.xlsx'

# Verificar si el archivo existe
if not os.path.exists(ruta_excel):
    print(f"Archivo no encontrado en la ruta: {ruta_excel}")
    # Si estás en Google Colab, puedes subir el archivo usando el siguiente código:
    # from google.colab import files
    # uploaded = files.upload()
else:
    # Cargar el DataFrame desde el archivo de Excel
    try:
        df = pd.read_excel(ruta_excel)
        print("DataFrame cargado exitosamente desde el archivo de Excel.")
    except Exception as e:
        print(f"Error al cargar el archivo de Excel: {e}")

# Asegurarse de que el DataFrame se cargó correctamente
try:
    df
except NameError:
    print("El DataFrame 'df' no está definido. Verifica que el archivo de Excel se haya cargado correctamente.")
    # Puedes detener la ejecución si el DataFrame no está disponible
    raise SystemExit("Finalizando ejecución debido a la ausencia del DataFrame.")

# Convertir la columna 'Fecha Creado' a datetime si no lo está
if 'Fecha Creado' in df.columns:
    df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')
else:
    print("La columna 'Fecha Creado' no existe en el DataFrame.")
    # Puedes optar por crear una columna de fecha por defecto o manejar el error según tus necesidades

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    if 'Categorias' in df.columns:
        categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
        todas_categorias = set()
        for lista_cats in categorias_series:
            todas_categorias.update(lista_cats)
        return sorted(todas_categorias)
    else:
        print("La columna 'Categorias' no existe en el DataFrame.")
        return []

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='10px 0')
)

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url and img_url != 'Sin datos':
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Botón para abrir la imagen en el navegador
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para obtener valores del producto de manera segura
def obtener_valor(producto, campo):
    valor = producto.get(campo, 'Sin datos')
    if pd.isna(valor) or valor == '':
        return 'Sin datos'
    return valor

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    categorias = obtener_valor(producto, 'Categorias')
    pasillo = obtener_valor(producto, 'Pasillo')
    estante = obtener_valor(producto, 'Estante')
    proveedor = obtener_valor(producto, 'Proveedor')
    codigo = obtener_valor(producto, 'Codigo')
    nombre = obtener_valor(producto, 'Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor(producto, 'imagen')

    # Aumentar el tamaño de la imagen en un 25%
    try:
        imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código
    except:
        imagen_ancho = 400

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <div style="display: flex; justify-content: flex-start; align-items: center; gap: 20px;">
            <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}</p>
            <p style='font-size: 16px;'><strong>Estante:</strong> {estante}</p>
            <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        </div>
        <hr style="margin-top: 10px;">
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado con separación de secciones y mejor disposición
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px;">
        <!-- Sección Superior -->
        <div style="text-align: center;">
            <h1 style="color: #333; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
            <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
            <hr style="margin: 10px 0;">
        </div>
        <div style="display: flex; justify-content: center; align-items: flex-start; margin-top: 10px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left; flex: 1;">
                <div style="margin-bottom: 10px;">
                    <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                    <p style="font-size: 20px; margin-top: -10px;">{stock}</p>
                </div>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        {ubicacion_html}
        <!-- Sección Inferior -->
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: left; padding-right: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón aquí
        display(checkbox_ubicacion)
        display(boton_descargar)

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    img_url = obtener_valor(producto, 'imagen')
    nombre = obtener_valor(producto, 'Nombre')
    codigo = obtener_valor(producto, 'Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y novedades)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                # Usar una función lambda con valor por defecto para capturar el valor correcto
                boton.on_click(lambda b, i=i: mostrar_lista_productos(df_productos, i, productos_por_pagina))
                botones_paginas.append(boton)
            paginacion = widgets.HBox(botones_paginas, layout=widgets.Layout(justify_content='center'))
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if checkbox_ordenar_novedad.value and not checkbox_categorias.value and texto == '':
            # Mostrar los 100 productos más recientes
            if 'Fecha Creado' in df.columns:
                df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
            else:
                df_filtrado = df.head(100)
                print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
            productos_por_pagina = 25
            mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
        elif checkbox_categorias.value:
            # Mostrar lista por categorías
            categoria_seleccionada = dropdown_categorias.value
            if categoria_seleccionada:
                df_filtrado = df.copy()
                # Expandir las categorías en listas
                if 'Categorias' in df_filtrado.columns:
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar según el checkbox "Ordenar x Novedad"
                    if checkbox_ordenar_novedad.value:
                        if 'Fecha Creado' in df_filtrado.columns:
                            df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False).head(100)
                        else:
                            print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                            df_filtrado = df_filtrado.head(100)
                        productos_por_pagina = 25
                    else:
                        df_filtrado = df_filtrado.sort_values('Nombre').head(10)
                        productos_por_pagina = 10
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
                    # Eliminar la columna auxiliar si existe
                    if 'Categorias_split' in df_filtrado.columns:
                        df_filtrado = df_filtrado.drop(columns=['Categorias_split'])
                else:
                    print("La columna 'Categorias' no existe en el DataFrame.")
            else:
                print("Seleccione una categoría.")
        elif texto != '':
            # Búsqueda normal
            if 'Nombre' in df.columns and 'Codigo' in df.columns:
                coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)]
                if checkbox_ordenar_novedad.value:
                    if 'Fecha Creado' in coincidencias.columns:
                        coincidencias = coincidencias.sort_values('Fecha Creado', ascending=False).head(100)
                    else:
                        coincidencias = coincidencias.head(100)
                        print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                else:
                    coincidencias = coincidencias.sort_values('Nombre').head(10)
                if not coincidencias.empty:
                    opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                    desplegable = widgets.Dropdown(
                        options=opciones,
                        description='Seleccionar:',
                        style={'description_width': 'initial'},
                        layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                    )
                    display(desplegable)
                    def mostrar_producto_cuando_selecciona(change):
                        if change['name'] == 'value' and change['new']:
                            with output_area:
                                output_area.clear_output()
                                # Reiniciar el estado del checkbox
                                checkbox_ubicacion.value = False
                                mostrar_producto_formato_completo(desplegable.value)
                    desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                else:
                    print("No se encontraron productos con ese nombre.")
            else:
                print("Las columnas 'Nombre' y/o 'Codigo' no existen en el DataFrame.")
        else:
            # Mostrar imagen del "Super Buscador" si no hay criterios de búsqueda
            if checkbox_ordenar_novedad.value:
                # Mostrar los 100 productos más recientes
                if 'Fecha Creado' in df.columns:
                    df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
                else:
                    df_filtrado = df.head(100)
                    print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                productos_por_pagina = 25
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Ordenar x Novedad"
checkbox_ordenar_novedad = widgets.Checkbox(
    value=False,
    description='Ordenar x Novedad',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Sugerir x Rubro (Próximamente)"
checkbox_sugerir_rubro = widgets.Checkbox(
    value=False,
    description='Sugerir x Rubro (Próximamente)',
    disabled=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 0 0 0')
)

# Agrupar los checkboxes en una línea horizontal con espacios
checkboxes_hbox = widgets.HBox([
    checkbox_categorias,
    checkbox_ordenar_novedad,
    checkbox_sugerir_rubro
], layout=widgets.Layout(justify_content='center', align_items='center'))

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        if checkbox_ordenar_novedad.value:
            actualizar_resultados(None)
        else:
            with output_area:
                output_area.clear_output()
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')
checkbox_ordenar_novedad.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
ruta_imagen_super_buscador = '/content/sample_data/bot (8).png'  # Ajusta la ruta según corresponda

if os.path.exists(ruta_imagen_super_buscador):
    super_buscador_img = widgets.Image(
        value=open(ruta_imagen_super_buscador, 'rb').read(),
        format='png',
        layout=widgets.Layout(width='50%', margin='20px auto',
                              justify_content='center', display='flex', align_items='center')
    )
else:
    # Si la imagen no se encuentra, muestra un mensaje o una imagen alternativa
    super_buscador_img = widgets.HTML(value="<p style='text-align:center;'>Imagen del Super Buscador no encontrada.</p>")

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkboxes_hbox, dropdown_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    if super_buscador_img:
        display(super_buscador_img)
    else:
        print("Imagen del Super Buscador no disponible.")

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output
import os

# Ruta del archivo de Excel
ruta_excel = '/content/1083 productos al 24 de sep.xlsx'

# Verificar si el archivo existe
if not os.path.exists(ruta_excel):
    print(f"Archivo no encontrado en la ruta: {ruta_excel}")
    # Si estás en Google Colab, puedes subir el archivo usando el siguiente código:
    # from google.colab import files
    # uploaded = files.upload()
else:
    # Cargar el DataFrame desde el archivo de Excel
    try:
        df = pd.read_excel(ruta_excel)
        print("DataFrame cargado exitosamente desde el archivo de Excel.")
    except Exception as e:
        print(f"Error al cargar el archivo de Excel: {e}")

# Asegurarse de que el DataFrame se cargó correctamente
try:
    df
except NameError:
    print("El DataFrame 'df' no está definido. Verifica que el archivo de Excel se haya cargado correctamente.")
    # Puedes detener la ejecución si el DataFrame no está disponible
    raise SystemExit("Finalizando ejecución debido a la ausencia del DataFrame.")

# Convertir la columna 'Fecha Creado' a datetime si no lo está
if 'Fecha Creado' in df.columns:
    df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')
else:
    print("La columna 'Fecha Creado' no existe en el DataFrame.")
    # Puedes optar por crear una columna de fecha por defecto o manejar el error según tus necesidades

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    if 'Categorias' in df.columns:
        categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
        todas_categorias = set()
        for lista_cats in categorias_series:
            todas_categorias.update(lista_cats)
        return sorted(todas_categorias)
    else:
        print("La columna 'Categorias' no existe en el DataFrame.")
        return []

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='10px 0')
)

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url and img_url != 'Sin datos':
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

# Botón para abrir la imagen en el navegador
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'
boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para obtener valores del producto de manera segura
def obtener_valor(producto, campo):
    valor = producto.get(campo, 'Sin datos')
    if pd.isna(valor) or valor == '':
        return 'Sin datos'
    return valor

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    categorias = obtener_valor(producto, 'Categorias')
    pasillo = obtener_valor(producto, 'Pasillo')
    estante = obtener_valor(producto, 'Estante')
    proveedor = obtener_valor(producto, 'Proveedor')
    codigo = obtener_valor(producto, 'Codigo')
    nombre = obtener_valor(producto, 'Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor(producto, 'imagen')

    # Aumentar el tamaño de la imagen en un 25%
    try:
        imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código
    except:
        imagen_ancho = 400

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <div style="display: flex; justify-content: flex-start; align-items: center; gap: 20px;">
            <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}</p>
            <p style='font-size: 16px;'><strong>Estante:</strong> {estante}</p>
            <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        </div>
        <hr style="margin-top: 10px;">
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado con separación de secciones y mejor disposición
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px;">
        <!-- Sección Superior -->
        <div style="text-align: center;">
            <h1 style="color: #333; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
            <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
            <hr style="margin: 10px 0;">
        </div>
        <div style="display: flex; justify-content: center; align-items: flex-start; margin-top: 10px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left; flex: 1;">
                <div style="margin-bottom: 10px;">
                    <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                    <p style="font-size: 20px; margin-top: -10px;">{stock}</p>
                </div>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        {ubicacion_html}
        <!-- Sección Inferior -->
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: left; padding-right: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón aquí
        display(checkbox_ubicacion)
        display(boton_descargar)

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    img_url = obtener_valor(producto, 'imagen')
    nombre = obtener_valor(producto, 'Nombre')
    codigo = obtener_valor(producto, 'Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y novedades)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                # Usar una función lambda con valor por defecto para capturar el valor correcto
                boton.on_click(lambda b, i=i: mostrar_lista_productos(df_productos, i, productos_por_pagina))
                botones_paginas.append(boton)
            paginacion = widgets.HBox(botones_paginas, layout=widgets.Layout(justify_content='center'))
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if checkbox_ordenar_novedad.value and not checkbox_categorias.value and texto == '':
            # Mostrar los 100 productos más recientes
            if 'Fecha Creado' in df.columns:
                df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
            else:
                df_filtrado = df.head(100)
                print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
            productos_por_pagina = 25
            mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
        elif checkbox_categorias.value:
            # Mostrar lista por categorías
            categoria_seleccionada = dropdown_categorias.value
            if categoria_seleccionada:
                df_filtrado = df.copy()
                # Expandir las categorías en listas
                if 'Categorias' in df_filtrado.columns:
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar según el checkbox "Ordenar x Novedad"
                    if checkbox_ordenar_novedad.value:
                        if 'Fecha Creado' in df_filtrado.columns:
                            df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False).head(100)
                        else:
                            df_filtrado = df_filtrado.head(100)
                            print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                        productos_por_pagina = 25
                    else:
                        df_filtrado = df_filtrado.sort_values('Nombre').head(10)
                        productos_por_pagina = 10
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
                    # Eliminar la columna auxiliar si existe
                    if 'Categorias_split' in df_filtrado.columns:
                        df_filtrado = df_filtrado.drop(columns=['Categorias_split'])
                else:
                    print("La columna 'Categorias' no existe en el DataFrame.")
            else:
                print("Seleccione una categoría.")
        elif texto != '':
            # Búsqueda normal
            if 'Nombre' in df.columns and 'Codigo' in df.columns:
                coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)]
                if checkbox_ordenar_novedad.value:
                    if 'Fecha Creado' in coincidencias.columns:
                        coincidencias = coincidencias.sort_values('Fecha Creado', ascending=False).head(100)
                    else:
                        coincidencias = coincidencias.head(100)
                        print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                else:
                    coincidencias = coincidencias.sort_values('Nombre').head(10)
                if not coincidencias.empty:
                    opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                    desplegable = widgets.Dropdown(
                        options=opciones,
                        description='Seleccionar:',
                        style={'description_width': 'initial'},
                        layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                    )
                    display(desplegable)
                    def mostrar_producto_cuando_selecciona(change):
                        if change['name'] == 'value' and change['new']:
                            with output_area:
                                output_area.clear_output()
                                # Reiniciar el estado del checkbox
                                checkbox_ubicacion.value = False
                                mostrar_producto_formato_completo(desplegable.value)
                    desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                else:
                    print("No se encontraron productos con ese nombre.")
            else:
                print("Las columnas 'Nombre' y/o 'Codigo' no existen en el DataFrame.")
        else:
            # Mostrar imagen del "Super Buscador" si no hay criterios de búsqueda
            if checkbox_ordenar_novedad.value:
                # Mostrar los 100 productos más recientes
                if 'Fecha Creado' in df.columns:
                    df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
                else:
                    df_filtrado = df.head(100)
                    print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                productos_por_pagina = 25
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Ordenar x Novedad"
checkbox_ordenar_novedad = widgets.Checkbox(
    value=False,
    description='Ordenar x Novedad',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Sugerir x Rubro (Próximamente)"
checkbox_sugerir_rubro = widgets.Checkbox(
    value=False,
    description='Sugerir x Rubro (Próximamente)',
    disabled=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 0 0 0')
)

# Agrupar los checkboxes en una línea horizontal con espacios
checkboxes_hbox = widgets.HBox([
    checkbox_categorias,
    checkbox_ordenar_novedad,
    checkbox_sugerir_rubro
], layout=widgets.Layout(justify_content='center', align_items='center'))

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        if checkbox_ordenar_novedad.value:
            actualizar_resultados(None)
        else:
            with output_area:
                output_area.clear_output()
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')
checkbox_ordenar_novedad.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
ruta_imagen_super_buscador = '/content/sample_data/bot (8).png'  # Ajusta la ruta según corresponda

if os.path.exists(ruta_imagen_super_buscador):
    super_buscador_img = widgets.Image(
        value=open(ruta_imagen_super_buscador, 'rb').read(),
        format='png',
        layout=widgets.Layout(width='50%', margin='20px auto',
                              justify_content='center', display='flex', align_items='center')
    )
else:
    # Si la imagen no se encuentra, muestra un mensaje o una imagen alternativa
    super_buscador_img = widgets.HTML(value="<p style='text-align:center;'>Imagen del Super Buscador no encontrada.</p>")

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkboxes_hbox, dropdown_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    if super_buscador_img:
        display(super_buscador_img)
    else:
        print("Imagen del Super Buscador no disponible.")

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output
import os

# Ruta del archivo de Excel
ruta_excel = '/content/1083 productos al 24 de sep.xlsx'

# Verificar si el archivo existe
if not os.path.exists(ruta_excel):
    print(f"Archivo no encontrado en la ruta: {ruta_excel}")
    # Si estás en Google Colab, puedes subir el archivo usando el siguiente código:
    # from google.colab import files
    # uploaded = files.upload()
else:
    # Cargar el DataFrame desde el archivo de Excel
    try:
        df = pd.read_excel(ruta_excel)
        print("DataFrame cargado exitosamente desde el archivo de Excel.")
    except Exception as e:
        print(f"Error al cargar el archivo de Excel: {e}")

# Asegurarse de que el DataFrame se cargó correctamente
try:
    df
except NameError:
    print("El DataFrame 'df' no está definido. Verifica que el archivo de Excel se haya cargado correctamente.")
    # Puedes detener la ejecución si el DataFrame no está disponible
    raise SystemExit("Finalizando ejecución debido a la ausencia del DataFrame.")

# Convertir la columna 'Fecha Creado' a datetime si no lo está
if 'Fecha Creado' in df.columns:
    df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')
else:
    print("La columna 'Fecha Creado' no existe en el DataFrame.")
    # Puedes optar por crear una columna de fecha por defecto o manejar el error según tus necesidades

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    if 'Categorias' in df.columns:
        categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
        todas_categorias = set()
        for lista_cats in categorias_series:
            todas_categorias.update(lista_cats)
        return sorted(todas_categorias)
    else:
        print("La columna 'Categorias' no existe en el DataFrame.")
        return []

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='10px 0')
)

# Botón para abrir la imagen en el navegador
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url and img_url != 'Sin datos':
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para obtener valores del producto de manera segura
def obtener_valor(producto, campo):
    valor = producto.get(campo, 'Sin datos')
    if pd.isna(valor) or valor == '':
        return 'Sin datos'
    return valor

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    categorias = obtener_valor(producto, 'Categorias')
    pasillo = obtener_valor(producto, 'Pasillo')
    estante = obtener_valor(producto, 'Estante')
    proveedor = obtener_valor(producto, 'Proveedor')
    codigo = obtener_valor(producto, 'Codigo')
    nombre = obtener_valor(producto, 'Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor(producto, 'imagen')

    # Aumentar el tamaño de la imagen en un 25%
    try:
        imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código
    except:
        imagen_ancho = 400

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <div style="display: flex; justify-content: flex-start; align-items: center; gap: 20px;">
            <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}</p>
            <p style='font-size: 16px;'><strong>Estante:</strong> {estante}</p>
            <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        </div>
        <hr style="margin-top: 10px;">
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado con separación de secciones y mejor disposición
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px;">
        <!-- Sección Superior -->
        <div style="text-align: center;">
            <h1 style="color: #333; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
            <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
            <hr style="margin: 10px 0;">
        </div>
        <div style="display: flex; justify-content: center; align-items: flex-start; margin-top: 10px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left; flex: 1;">
                <div style="margin-bottom: 10px;">
                    <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                    <p style="font-size: 20px; margin-top: -10px;">{stock}</p>
                </div>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        {ubicacion_html}
        <!-- Contenedor para Checkbox y Botón -->
        <div style="text-align: center; margin-top: 15px;">
            <!-- Los widgets se mostrarán aquí por separado -->
        </div>
        <!-- Sección Inferior -->
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: left; padding-right: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón fuera del HTML
        display(controles_hbox)

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    img_url = obtener_valor(producto, 'imagen')
    nombre = obtener_valor(producto, 'Nombre')
    codigo = obtener_valor(producto, 'Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y novedades)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                # Usar una función lambda con valor por defecto para capturar el valor correcto
                boton.on_click(lambda b, i=i: mostrar_lista_productos(df_productos, i, productos_por_pagina))
                botones_paginas.append(boton)
            paginacion = widgets.HBox(botones_paginas, layout=widgets.Layout(justify_content='center'))
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if checkbox_ordenar_novedad.value and not checkbox_categorias.value and texto == '':
            # Mostrar los 100 productos más recientes
            if 'Fecha Creado' in df.columns:
                df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
            else:
                df_filtrado = df.head(100)
                print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
            productos_por_pagina = 25
            mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
        elif checkbox_categorias.value:
            # Mostrar lista por categorías
            categoria_seleccionada = dropdown_categorias.value
            if categoria_seleccionada:
                df_filtrado = df.copy()
                # Expandir las categorías en listas
                if 'Categorias' in df_filtrado.columns:
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar según el checkbox "Ordenar x Novedad"
                    if checkbox_ordenar_novedad.value:
                        if 'Fecha Creado' in df_filtrado.columns:
                            df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False).head(100)
                        else:
                            df_filtrado = df_filtrado.head(100)
                            print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                        productos_por_pagina = 25
                    else:
                        df_filtrado = df_filtrado.sort_values('Nombre').head(10)
                        productos_por_pagina = 10
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
                    # Eliminar la columna auxiliar si existe
                    if 'Categorias_split' in df_filtrado.columns:
                        df_filtrado = df_filtrado.drop(columns=['Categorias_split'])
                else:
                    print("La columna 'Categorias' no existe en el DataFrame.")
            else:
                print("Seleccione una categoría.")
        elif texto != '':
            # Búsqueda normal
            if 'Nombre' in df.columns and 'Codigo' in df.columns:
                coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)]
                if checkbox_ordenar_novedad.value:
                    if 'Fecha Creado' in coincidencias.columns:
                        coincidencias = coincidencias.sort_values('Fecha Creado', ascending=False).head(100)
                    else:
                        coincidencias = coincidencias.head(100)
                        print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                else:
                    coincidencias = coincidencias.sort_values('Nombre').head(10)
                if not coincidencias.empty:
                    opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                    desplegable = widgets.Dropdown(
                        options=opciones,
                        description='Seleccionar:',
                        style={'description_width': 'initial'},
                        layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                    )
                    display(desplegable)
                    def mostrar_producto_cuando_selecciona(change):
                        if change['name'] == 'value' and change['new']:
                            with output_area:
                                output_area.clear_output()
                                # Reiniciar el estado del checkbox
                                checkbox_ubicacion.value = False
                                mostrar_producto_formato_completo(desplegable.value)
                    desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                else:
                    print("No se encontraron productos con ese nombre.")
            else:
                print("Las columnas 'Nombre' y/o 'Codigo' no existen en el DataFrame.")
        else:
            # Mostrar imagen del "Super Buscador" si no hay criterios de búsqueda
            if checkbox_ordenar_novedad.value:
                # Mostrar los 100 productos más recientes
                if 'Fecha Creado' in df.columns:
                    df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
                else:
                    df_filtrado = df.head(100)
                    print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                productos_por_pagina = 25
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Ordenar x Novedad"
checkbox_ordenar_novedad = widgets.Checkbox(
    value=False,
    description='Ordenar x Novedad',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Sugerir x Rubro (Próximamente)"
checkbox_sugerir_rubro = widgets.Checkbox(
    value=False,
    description='Sugerir x Rubro (Próximamente)',
    disabled=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 0 0 0')
)

# Agrupar los checkboxes en una línea horizontal con espacios
checkboxes_hbox = widgets.HBox([
    checkbox_categorias,
    checkbox_ordenar_novedad,
    checkbox_sugerir_rubro
], layout=widgets.Layout(justify_content='center', align_items='center'))

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        if checkbox_ordenar_novedad.value:
            actualizar_resultados(None)
        else:
            with output_area:
                output_area.clear_output()
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')
checkbox_ordenar_novedad.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
ruta_imagen_super_buscador = '/content/sample_data/bot (8).png'  # Ajusta la ruta según corresponda

if os.path.exists(ruta_imagen_super_buscador):
    super_buscador_img = widgets.Image(
        value=open(ruta_imagen_super_buscador, 'rb').read(),
        format='png',
        layout=widgets.Layout(width='50%', margin='20px auto',
                              justify_content='center', display='flex', align_items='center')
    )
else:
    # Si la imagen no se encuentra, muestra un mensaje o una imagen alternativa
    super_buscador_img = widgets.HTML(value="<p style='text-align:center;'>Imagen del Super Buscador no encontrada.</p>")

# Crear un contenedor para los controles (Checkbox y Botón)
controles_hbox = widgets.HBox([
    checkbox_ubicacion,
    boton_descargar
], layout=widgets.Layout(justify_content='center', align_items='center', gap='20px'))

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkboxes_hbox, dropdown_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    if super_buscador_img:
        display(super_buscador_img)
    else:
        print("Imagen del Super Buscador no disponible.")

from google.colab import files
uploaded = files.upload()

from google.colab import drive
drive.mount('/content/drive')

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output
import os

# Ruta del archivo de Excel
# Si subiste manualmente:
ruta_excel = '/content/1083 productos al 24 de sep.xlsx'

# Si montaste Google Drive, usa la ruta correspondiente:
# ruta_excel = '/content/drive/MyDrive/Colab Notebooks/1083 productos al 24 de sep.xlsx'

# Verificar si el archivo existe
if not os.path.exists(ruta_excel):
    print(f"Archivo no encontrado en la ruta: {ruta_excel}")
    print("Por favor, sube el archivo nuevamente o verifica la ruta.")
    # Puedes detener la ejecución aquí si el archivo es esencial
    # exit()
else:
    # Cargar el DataFrame desde el archivo de Excel
    try:
        df = pd.read_excel(ruta_excel)
        print("DataFrame cargado exitosamente desde el archivo de Excel.")
    except Exception as e:
        print(f"Error al cargar el archivo de Excel: {e}")

# Asegurarse de que el DataFrame se cargó correctamente
if 'df' not in locals():
    print("El DataFrame 'df' no está definido. Verifica que el archivo de Excel se haya cargado correctamente.")
    # Puedes detener la ejecución si el DataFrame no está disponible
    raise SystemExit("Finalizando ejecución debido a la ausencia del DataFrame.")

# Convertir la columna 'Fecha Creado' a datetime si no lo está
if 'Fecha Creado' in df.columns:
    df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')
else:
    print("La columna 'Fecha Creado' no existe en el DataFrame.")
    # Puedes optar por crear una columna de fecha por defecto o manejar el error según tus necesidades

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    if 'Categorias' in df.columns:
        categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
        todas_categorias = set()
        for lista_cats in categorias_series:
            todas_categorias.update(lista_cats)
        return sorted(todas_categorias)
    else:
        print("La columna 'Categorias' no existe en el DataFrame.")
        return []

lista_categorias = obtener_categorias_unicas(df)

# Continuar con el resto de tu código...
# [Aquí va el resto del código que ya tienes, asegurándote de que funcione correctamente]

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output
import os

# Ruta del archivo de Excel
# Si subiste manualmente:
ruta_excel = '/content/1083 productos al 24 de sep.xlsx'

# Si montaste Google Drive, usa la ruta correspondiente:
# ruta_excel = '/content/drive/MyDrive/Colab Notebooks/1083 productos al 24 de sep.xlsx'

# Verificar si el archivo existe
if not os.path.exists(ruta_excel):
    print(f"Archivo no encontrado en la ruta: {ruta_excel}")
    print("Por favor, sube el archivo nuevamente o verifica la ruta.")
    # Puedes detener la ejecución aquí si el archivo es esencial
    raise SystemExit("Finalizando ejecución debido a la ausencia del archivo Excel.")
else:
    # Cargar el DataFrame desde el archivo de Excel
    try:
        df = pd.read_excel(ruta_excel)
        print("DataFrame cargado exitosamente desde el archivo de Excel.")
    except Exception as e:
        print(f"Error al cargar el archivo de Excel: {e}")
        raise SystemExit("Finalizando ejecución debido al error al cargar el archivo Excel.")

# Asegurarse de que el DataFrame se cargó correctamente
if 'df' not in locals():
    print("El DataFrame 'df' no está definido. Verifica que el archivo de Excel se haya cargado correctamente.")
    raise SystemExit("Finalizando ejecución debido a la ausencia del DataFrame.")

# Convertir la columna 'Fecha Creado' a datetime si no lo está
if 'Fecha Creado' in df.columns:
    df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')
else:
    print("La columna 'Fecha Creado' no existe en el DataFrame.")
    # Puedes optar por crear una columna de fecha por defecto o manejar el error según tus necesidades

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    if 'Categorias' in df.columns:
        categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
        todas_categorias = set()
        for lista_cats in categorias_series:
            todas_categorias.update(lista_cats)
        return sorted(todas_categorias)
    else:
        print("La columna 'Categorias' no existe en el DataFrame.")
        return []

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='10px 0')
)

# Botón para abrir la imagen en el navegador
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url and img_url != 'Sin datos':
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para obtener valores del producto de manera segura
def obtener_valor(producto, campo):
    valor = producto.get(campo, 'Sin datos')
    if pd.isna(valor) or valor == '':
        return 'Sin datos'
    return valor

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    categorias = obtener_valor(producto, 'Categorias')
    pasillo = obtener_valor(producto, 'Pasillo')
    estante = obtener_valor(producto, 'Estante')
    proveedor = obtener_valor(producto, 'Proveedor')
    codigo = obtener_valor(producto, 'Codigo')
    nombre = obtener_valor(producto, 'Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor(producto, 'imagen')

    # Aumentar el tamaño de la imagen en un 25%
    try:
        imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código
    except:
        imagen_ancho = 400

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <div style="display: flex; justify-content: flex-start; align-items: center; gap: 20px;">
            <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}</p>
            <p style='font-size: 16px;'><strong>Estante:</strong> {estante}</p>
            <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        </div>
        <hr style="margin-top: 10px;">
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado con separación de secciones y mejor disposición
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px;">
        <!-- Sección Superior -->
        <div style="text-align: center;">
            <h1 style="color: #333; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
            <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
            <hr style="margin: 10px 0;">
        </div>
        <div style="display: flex; justify-content: center; align-items: flex-start; margin-top: 10px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left; flex: 1;">
                <div style="margin-bottom: 10px;">
                    <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                    <p style="font-size: 20px; margin-top: -10px;">{stock}</p>
                </div>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        {ubicacion_html}
        <!-- Contenedor para Checkbox y Botón -->
        <div style="text-align: center; margin-top: 15px;">
            <!-- Los widgets se mostrarán aquí por separado -->
        </div>
        <!-- Sección Inferior -->
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: left; padding-right: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón fuera del HTML para evitar errores de f-string
        display(widgets.HBox([checkbox_ubicacion, boton_descargar], layout=widgets.Layout(justify_content='center', align_items='center', gap='20px')))

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    img_url = obtener_valor(producto, 'imagen')
    nombre = obtener_valor(producto, 'Nombre')
    codigo = obtener_valor(producto, 'Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y novedades)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                # Usar una función lambda con valor por defecto para capturar el valor correcto
                boton.on_click(lambda b, i=i: mostrar_lista_productos(df_productos, i, productos_por_pagina))
                botones_paginas.append(boton)
            paginacion = widgets.HBox(botones_paginas, layout=widgets.Layout(justify_content='center'))
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if checkbox_ordenar_novedad.value and not checkbox_categorias.value and texto == '':
            # Mostrar los 100 productos más recientes
            if 'Fecha Creado' in df.columns:
                df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
            else:
                df_filtrado = df.head(100)
                print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
            productos_por_pagina = 25
            mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
        elif checkbox_categorias.value:
            # Mostrar lista por categorías
            categoria_seleccionada = dropdown_categorias.value
            if categoria_seleccionada:
                df_filtrado = df.copy()
                # Expandir las categorías en listas
                if 'Categorias' in df_filtrado.columns:
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar según el checkbox "Ordenar x Novedad"
                    if checkbox_ordenar_novedad.value:
                        if 'Fecha Creado' in df_filtrado.columns:
                            df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False).head(100)
                        else:
                            df_filtrado = df_filtrado.head(100)
                            print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                        productos_por_pagina = 25
                    else:
                        df_filtrado = df_filtrado.sort_values('Nombre').head(10)
                        productos_por_pagina = 10
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
                    # Eliminar la columna auxiliar si existe
                    if 'Categorias_split' in df_filtrado.columns:
                        df_filtrado = df_filtrado.drop(columns=['Categorias_split'])
                else:
                    print("La columna 'Categorias' no existe en el DataFrame.")
            else:
                print("Seleccione una categoría.")
        elif texto != '':
            # Búsqueda normal
            if 'Nombre' in df.columns and 'Codigo' in df.columns:
                coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)]
                if checkbox_ordenar_novedad.value:
                    if 'Fecha Creado' in coincidencias.columns:
                        coincidencias = coincidencias.sort_values('Fecha Creado', ascending=False).head(100)
                    else:
                        coincidencias = coincidencias.head(100)
                        print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                else:
                    coincidencias = coincidencias.sort_values('Nombre').head(10)
                if not coincidencias.empty:
                    opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                    desplegable = widgets.Dropdown(
                        options=opciones,
                        description='Seleccionar:',
                        style={'description_width': 'initial'},
                        layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                    )
                    display(desplegable)
                    def mostrar_producto_cuando_selecciona(change):
                        if change['name'] == 'value' and change['new']:
                            with output_area:
                                output_area.clear_output()
                                # Reiniciar el estado del checkbox
                                checkbox_ubicacion.value = False
                                mostrar_producto_formato_completo(desplegable.value)
                    desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                else:
                    print("No se encontraron productos con ese nombre.")
            else:
                print("Las columnas 'Nombre' y/o 'Codigo' no existen en el DataFrame.")
        else:
            # Mostrar imagen del "Super Buscador" si no hay criterios de búsqueda
            if checkbox_ordenar_novedad.value:
                # Mostrar los 100 productos más recientes
                if 'Fecha Creado' in df.columns:
                    df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
                else:
                    df_filtrado = df.head(100)
                    print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                productos_por_pagina = 25
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Ordenar x Novedad"
checkbox_ordenar_novedad = widgets.Checkbox(
    value=False,
    description='Ordenar x Novedad',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Sugerir x Rubro (Próximamente)"
checkbox_sugerir_rubro = widgets.Checkbox(
    value=False,
    description='Sugerir x Rubro (Próximamente)',
    disabled=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 0 0 0')
)

# Agrupar los checkboxes en una línea horizontal con espacios
checkboxes_hbox = widgets.HBox([
    checkbox_categorias,
    checkbox_ordenar_novedad,
    checkbox_sugerir_rubro
], layout=widgets.Layout(justify_content='center', align_items='center'))

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        if checkbox_ordenar_novedad.value:
            actualizar_resultados(None)
        else:
            with output_area:
                output_area.clear_output()
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')
checkbox_ordenar_novedad.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
ruta_imagen_super_buscador = '/content/sample_data/bot (8).png'  # Ajusta la ruta según corresponda

if os.path.exists(ruta_imagen_super_buscador):
    super_buscador_img = widgets.Image(
        value=open(ruta_imagen_super_buscador, 'rb').read(),
        format='png',
        layout=widgets.Layout(width='50%', margin='20px auto',
                              justify_content='center', display='flex', align_items='center')
    )
else:
    # Si la imagen no se encuentra, muestra un mensaje o una imagen alternativa
    super_buscador_img = widgets.HTML(value="<p style='text-align:center;'>Imagen del Super Buscador no encontrada.</p>")

# Crear un contenedor para los controles (Checkbox y Botón)
controles_hbox = widgets.HBox([
    checkbox_ubicacion,
    boton_descargar
], layout=widgets.Layout(justify_content='center', align_items='center', gap='20px'))

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkboxes_hbox, dropdown_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    if super_buscador_img:
        display(super_buscador_img)
    else:
        print("Imagen del Super Buscador no disponible.")

# Crear una carpeta en Google Drive si no existe
!mkdir -p /content/drive/MyDrive/Colab\ Notebooks/

# Mover el archivo Excel y la imagen a la carpeta
!mv /content/1083\ productos\ al\ 24\ de\ sep.xlsx /content/drive/MyDrive/Colab\ Notebooks/
!mv /content/bot\ \(8\).png /content/drive/MyDrive/Colab\ Notebooks/

# Importar librerías necesarias
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript, clear_output
import os

# Ruta del archivo de Excel en Google Drive
ruta_excel = '/content/drive/MyDrive/Colab Notebooks/1083 productos al 24 de sep.xlsx'

# Ruta de la imagen en Google Drive
ruta_imagen_super_buscador = '/content/drive/MyDrive/Colab Notebooks/bot (8).png'

# Verificar si el archivo Excel existe
if not os.path.exists(ruta_excel):
    print(f"Archivo no encontrado en la ruta: {ruta_excel}")
    print("Por favor, sube el archivo nuevamente o verifica la ruta.")
    raise SystemExit("Finalizando ejecución debido a la ausencia del archivo Excel.")
else:
    # Cargar el DataFrame desde el archivo de Excel
    try:
        df = pd.read_excel(ruta_excel)
        print("DataFrame cargado exitosamente desde el archivo de Excel.")
    except Exception as e:
        print(f"Error al cargar el archivo de Excel: {e}")
        raise SystemExit("Finalizando ejecución debido al error al cargar el archivo Excel.")

# Asegurarse de que el DataFrame se cargó correctamente
if 'df' not in locals():
    print("El DataFrame 'df' no está definido. Verifica que el archivo de Excel se haya cargado correctamente.")
    raise SystemExit("Finalizando ejecución debido a la ausencia del DataFrame.")

# Convertir la columna 'Fecha Creado' a datetime si no lo está
if 'Fecha Creado' in df.columns:
    df['Fecha Creado'] = pd.to_datetime(df['Fecha Creado'], errors='coerce')
else:
    print("La columna 'Fecha Creado' no existe en el DataFrame.")
    # Puedes optar por crear una columna de fecha por defecto o manejar el error según tus necesidades

# Paso 1: Separar las categorías individuales y obtener una lista única
def obtener_categorias_unicas(df):
    if 'Categorias' in df.columns:
        categorias_series = df['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
        todas_categorias = set()
        for lista_cats in categorias_series:
            todas_categorias.update(lista_cats)
        return sorted(todas_categorias)
    else:
        print("La columna 'Categorias' no existe en el DataFrame.")
        return []

lista_categorias = obtener_categorias_unicas(df)

# Diccionario de mapeo entre rubros y categorías
rubro_a_categorias = {
    'jugueterías': ['Juguetería', 'Peluches', 'Figuras Coleccionables', 'Juegos de Mesa', 'Peluches Chicos', 'Peluches Medianos', 'Peluches Grandes'],
    'librerías': ['Libros y Revistas', 'Librería', 'Carpetas', 'Mochilas', 'Útiles Escolares'],
    # Agrega el resto de los rubros y categorías aquí
}

# Convertir las claves del diccionario a minúsculas para facilitar la comparación
rubro_a_categorias = {k.lower(): v for k, v in rubro_a_categorias.items()}

# Variable global para almacenar el producto seleccionado
producto_seleccionado = None

# Área de salida para mostrar resultados y detalles del producto
output_area = widgets.Output()

# Casilla de verificación para mostrar la ubicación
checkbox_ubicacion = widgets.Checkbox(
    value=False,
    description='Mostrar Ubicación',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='10px 0')
)

# Botón para abrir la imagen en el navegador
boton_descargar = widgets.Button(
    description="Descargar imagen",
    button_style='',  # Dejar vacío para personalizar completamente
    layout=widgets.Layout(width='40%', border_radius='15px', margin='10px auto',
                          justify_content='center', display='flex', align_items='center')
)
boton_descargar.style.button_color = '#32CD32'  # Verde vibrante
boton_descargar.style.font_weight = 'bold'

# Función para abrir la imagen en una nueva pestaña al hacer clic en "Descargar imagen"
def abrir_imagen_en_navegador(b):
    img_url = producto_seleccionado.get('imagen', '')
    if img_url and img_url != 'Sin datos':
        display(Javascript(f"window.open('{img_url}', '_blank');"))
    else:
        print("No hay imagen disponible para abrir.")

boton_descargar.on_click(abrir_imagen_en_navegador)

# Función para obtener valores del producto de manera segura
def obtener_valor(producto, campo):
    valor = producto.get(campo, 'Sin datos')
    if pd.isna(valor) or valor == '':
        return 'Sin datos'
    return valor

# Función para mostrar el producto seleccionado con el estilo preferido
def mostrar_producto_formato_completo(producto):
    global producto_seleccionado
    producto_seleccionado = producto  # Guardar el producto seleccionado para acciones posteriores

    # Obtener datos del producto
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    # Obtener el precio y asegurarse de que sea numérico
    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    categorias = obtener_valor(producto, 'Categorias')
    pasillo = obtener_valor(producto, 'Pasillo')
    estante = obtener_valor(producto, 'Estante')
    proveedor = obtener_valor(producto, 'Proveedor')
    codigo = obtener_valor(producto, 'Codigo')
    nombre = obtener_valor(producto, 'Nombre')

    # Usar la URL de la imagen desde la columna 'imagen' del DataFrame
    img_url = obtener_valor(producto, 'imagen')

    # Aumentar el tamaño de la imagen en un 25%
    try:
        imagen_ancho = 400 * 1.25  # Originalmente era 400px en tu código
    except:
        imagen_ancho = 400

    # Información de ubicación, mostrada según el estado del checkbox
    if checkbox_ubicacion.value:
        ubicacion_html = f"""
        <div style="display: flex; justify-content: flex-start; align-items: center; gap: 20px;">
            <p style='font-size: 16px;'><strong>Pasillo:</strong> {pasillo}</p>
            <p style='font-size: 16px;'><strong>Estante:</strong> {estante}</p>
            <p style='font-size: 16px;'><strong>Proveedor:</strong> {proveedor}</p>
        </div>
        <hr style="margin-top: 10px;">
        """
    else:
        ubicacion_html = ""

    # Diseño HTML actualizado con separación de secciones y mejor disposición
    html_content = f"""
    <div style="border:2px solid #cccccc; padding: 15px; margin: 10px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #f9f9f9; box-shadow: 2px 2px 12px #aaaaaa;
                border-radius: 10px;">
        <!-- Sección Superior -->
        <div style="text-align: center;">
            <h1 style="color: #333; font-size: 32px; margin-bottom: 5px;">{nombre}</h1>
            <h2 style="font-size: 24px; color: #666; margin-top: 5px;">Código: {codigo}</h2>
            <hr style="margin: 10px 0;">
        </div>
        <div style="display: flex; justify-content: center; align-items: flex-start; margin-top: 10px;">
            <img src="{img_url}" style="width:{imagen_ancho}px; height: auto; border-radius: 8px; margin-right: 20px;" alt="Imagen del producto">
            <div style="text-align: left; flex: 1;">
                <div style="margin-bottom: 10px;">
                    <p style="font-size: 20px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                    <p style="font-size: 20px; margin-top: -10px;">{stock}</p>
                </div>
                <p style="font-size: 20px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 18px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 18px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
            </div>
        </div>
        {ubicacion_html}
        <!-- Contenedor para Checkbox y Botón -->
        <div style="text-align: center; margin-top: 15px;">
            <!-- Los widgets se mostrarán aquí por separado -->
        </div>
        <!-- Sección Inferior -->
        <div style="display: flex; justify-content: space-between; margin-top: 15px;">
            <div style="text-align: left; padding-left: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 16px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="text-align: left; padding-right: 20px; flex: 1;">
                <p style="font-size: 16px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 16px;"><strong>Categorías:</strong> {categorias}</p>
            </div>
        </div>
    </div>
    """

    with output_area:
        output_area.clear_output()
        display(HTML(html_content))
        # Mostrar el checkbox y el botón fuera del HTML para evitar errores de f-string
        display(widgets.HBox([checkbox_ubicacion, boton_descargar], layout=widgets.Layout(justify_content='center', align_items='center', gap='20px')))

# Función para actualizar la visualización al cambiar el estado del checkbox
def actualizar_ubicacion(change):
    if producto_seleccionado:
        mostrar_producto_formato_completo(producto_seleccionado)

checkbox_ubicacion.observe(actualizar_ubicacion, names='value')

# Función para mostrar productos en formato de lista (imagen más pequeña)
def mostrar_producto_formato_lista(producto):
    stock = obtener_valor(producto, 'Stock')
    try:
        stock_valor = float(stock)
        stock_color = "red" if stock_valor < 5 else "green"
    except ValueError:
        stock_color = "black"

    precio_jugueterias_face = obtener_valor(producto, 'Precio Jugueterias face')
    try:
        precio_jugueterias_face = float(precio_jugueterias_face)
    except ValueError:
        precio_jugueterias_face = 0

    forzar_multiplos = obtener_valor(producto, 'forzar multiplos')
    try:
        forzar_multiplos = int(forzar_multiplos)
        if forzar_multiplos > 0:
            venta_forzada_texto = f"Venta Forzada: {forzar_multiplos}"
            venta_forzada_color = "red"
            precio_caja_venta = forzar_multiplos * precio_jugueterias_face
            mostrar_precio_caja = True
        else:
            venta_forzada_texto = "Venta Forzada: NO"
            venta_forzada_color = "green"
            precio_caja_venta = precio_jugueterias_face
            mostrar_precio_caja = False
    except ValueError:
        venta_forzada_texto = "Venta Forzada: NO"
        venta_forzada_color = "green"
        precio_caja_venta = precio_jugueterias_face
        mostrar_precio_caja = False

    precio_mayorista = obtener_valor(producto, 'Precio')
    unidades_por_bulto = obtener_valor(producto, 'unidad por bulto')
    descripcion = obtener_valor(producto, 'Descripción') if 'Descripción' in producto else obtener_valor(producto, 'Descripcion')
    img_url = obtener_valor(producto, 'imagen')
    nombre = obtener_valor(producto, 'Nombre')
    codigo = obtener_valor(producto, 'Codigo')

    # Diseño HTML para listas (imagen más pequeña)
    html_content = f"""
    <div style="border:1px solid #cccccc; padding: 10px; margin: 5px auto; width: 90%;
                font-family: Arial, sans-serif; background-color: #ffffff; box-shadow: 1px 1px 6px #aaaaaa;
                border-radius: 5px; text-align: left;">
        <h3 style="color: #333; font-size: 20px; margin-bottom: 5px;">{nombre}</h3>
        <p style="font-size: 14px; color: #666; margin-top: 5px;"><strong>Código:</strong> {codigo}</p>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <p style="font-size: 12px; font-weight: bold; color: {stock_color};"><strong>STOCK</strong></p>
                <p style="font-size: 12px;">{stock}</p>
                <p style="font-size: 12px;"><strong>Descripción:</strong> {descripcion}</p>
                <p style="font-size: 12px; font-weight: bold;">Precio: ${precio_jugueterias_face}</p>
                <p style="font-size: 12px; color: {venta_forzada_color};"><strong>{venta_forzada_texto}</strong></p>
                {"<p style='font-size: 12px; font-weight: bold;'>Precio Caja/Venta: $" + str(precio_caja_venta) + "</p>" if mostrar_precio_caja else ""}
                <p style="font-size: 12px;"><strong>Precio Mayorista:</strong> ${precio_mayorista}</p>
                <p style="font-size: 12px;"><strong>Unidades x Bulto:</strong> {unidades_por_bulto}</p>
            </div>
            <div style="flex: 0;">
                <img src="{img_url}" style="width:100px; height: auto; border-radius: 4px;" alt="Imagen del producto">
            </div>
        </div>
    </div>
    """
    return html_content

# Función para mostrar una lista paginada de productos (para categorías y novedades)
def mostrar_lista_productos(df_productos, pagina_actual, productos_por_pagina):
    total_productos = len(df_productos)
    total_paginas = (total_productos + productos_por_pagina - 1) // productos_por_pagina

    inicio = (pagina_actual - 1) * productos_por_pagina
    fin = inicio + productos_por_pagina
    productos_pagina = df_productos.iloc[inicio:fin]

    with output_area:
        output_area.clear_output()
        for idx, fila in productos_pagina.iterrows():
            # Aquí usamos la versión compacta de la visualización para listas
            html_producto = mostrar_producto_formato_lista(fila)
            display(HTML(html_producto))
        # Mostrar controles de paginación
        if total_paginas > 1:
            botones_paginas = []
            for i in range(1, total_paginas + 1):
                boton = widgets.Button(description=str(i), layout=widgets.Layout(width='30px'))
                if i == pagina_actual:
                    boton.button_style = 'primary'
                # Usar una función lambda con valor por defecto para capturar el valor correcto
                boton.on_click(lambda b, i=i: mostrar_lista_productos(df_productos, i, productos_por_pagina))
                botones_paginas.append(boton)
            paginacion = widgets.HBox(botones_paginas, layout=widgets.Layout(justify_content='center'))
            display(paginacion)

# Función para actualizar los resultados de búsqueda y mostrar el producto seleccionado
def actualizar_resultados(change):
    texto = entrada_busqueda.value.strip()
    with output_area:
        output_area.clear_output()
        if checkbox_ordenar_novedad.value and not checkbox_categorias.value and texto == '':
            # Mostrar los 100 productos más recientes
            if 'Fecha Creado' in df.columns:
                df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
            else:
                df_filtrado = df.head(100)
                print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
            productos_por_pagina = 25
            mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
        elif checkbox_categorias.value:
            # Mostrar lista por categorías
            categoria_seleccionada = dropdown_categorias.value
            if categoria_seleccionada:
                df_filtrado = df.copy()
                # Expandir las categorías en listas
                if 'Categorias' in df_filtrado.columns:
                    df_filtrado['Categorias_split'] = df_filtrado['Categorias'].dropna().apply(lambda x: [cat.strip() for cat in x.split(',')])
                    # Filtrar los productos que pertenecen a la categoría seleccionada
                    df_filtrado = df_filtrado[df_filtrado['Categorias_split'].apply(lambda cats: categoria_seleccionada in cats if isinstance(cats, list) else False)]
                    # Ordenar según el checkbox "Ordenar x Novedad"
                    if checkbox_ordenar_novedad.value:
                        if 'Fecha Creado' in df_filtrado.columns:
                            df_filtrado = df_filtrado.sort_values('Fecha Creado', ascending=False).head(100)
                        else:
                            df_filtrado = df_filtrado.head(100)
                            print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                        productos_por_pagina = 25
                    else:
                        df_filtrado = df_filtrado.sort_values('Nombre').head(10)
                        productos_por_pagina = 10
                    # Mostrar lista paginada
                    mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
                    # Eliminar la columna auxiliar si existe
                    if 'Categorias_split' in df_filtrado.columns:
                        df_filtrado = df_filtrado.drop(columns=['Categorias_split'])
                else:
                    print("La columna 'Categorias' no existe en el DataFrame.")
            else:
                print("Seleccione una categoría.")
        elif texto != '':
            # Búsqueda normal
            if 'Nombre' in df.columns and 'Codigo' in df.columns:
                coincidencias = df[df['Nombre'].str.contains(texto, case=False, na=False)]
                if checkbox_ordenar_novedad.value:
                    if 'Fecha Creado' in coincidencias.columns:
                        coincidencias = coincidencias.sort_values('Fecha Creado', ascending=False).head(100)
                    else:
                        coincidencias = coincidencias.head(100)
                        print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                else:
                    coincidencias = coincidencias.sort_values('Nombre').head(10)
                if not coincidencias.empty:
                    opciones = {f"{fila['Nombre']} (Código: {fila['Codigo']})": fila.to_dict() for idx, fila in coincidencias.iterrows()}
                    desplegable = widgets.Dropdown(
                        options=opciones,
                        description='Seleccionar:',
                        style={'description_width': 'initial'},
                        layout=widgets.Layout(width='80%', margin='0 auto')  # Centrar el dropdown
                    )
                    display(desplegable)
                    def mostrar_producto_cuando_selecciona(change):
                        if change['name'] == 'value' and change['new']:
                            with output_area:
                                output_area.clear_output()
                                # Reiniciar el estado del checkbox
                                checkbox_ubicacion.value = False
                                mostrar_producto_formato_completo(desplegable.value)
                    desplegable.observe(mostrar_producto_cuando_selecciona, names='value')
                else:
                    print("No se encontraron productos con ese nombre.")
            else:
                print("Las columnas 'Nombre' y/o 'Codigo' no existen en el DataFrame.")
        else:
            # Mostrar imagen del "Super Buscador" si no hay criterios de búsqueda
            if checkbox_ordenar_novedad.value:
                # Mostrar los 100 productos más recientes
                if 'Fecha Creado' in df.columns:
                    df_filtrado = df.sort_values('Fecha Creado', ascending=False).head(100)
                else:
                    df_filtrado = df.head(100)
                    print("La columna 'Fecha Creado' no existe. Ordenando por el orden original del DataFrame.")
                productos_por_pagina = 25
                mostrar_lista_productos(df_filtrado, 1, productos_por_pagina)
            else:
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

# Widgets para las nuevas funcionalidades

# Cuadro de búsqueda centrado
entrada_busqueda = widgets.Text(
    value='',
    placeholder='🔍 Ingresá el nombre del producto',
    layout=widgets.Layout(width='80%', margin='10px auto', justify_content='center')
)
entrada_busqueda.observe(actualizar_resultados, names='value')

# Checkbox "Ver lista por Categorías"
checkbox_categorias = widgets.Checkbox(
    value=False,
    description='Ver lista por Categorías',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Ordenar x Novedad"
checkbox_ordenar_novedad = widgets.Checkbox(
    value=False,
    description='Ordenar x Novedad',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 10px 0 0')
)

# Checkbox "Sugerir x Rubro (Próximamente)"
checkbox_sugerir_rubro = widgets.Checkbox(
    value=False,
    description='Sugerir x Rubro (Próximamente)',
    disabled=True,
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='auto', margin='0 0 0 0')
)

# Agrupar los checkboxes en una línea horizontal con espacios
checkboxes_hbox = widgets.HBox([
    checkbox_categorias,
    checkbox_ordenar_novedad,
    checkbox_sugerir_rubro
], layout=widgets.Layout(justify_content='center', align_items='center'))

# Dropdown de categorías (inicialmente oculto)
dropdown_categorias = widgets.Dropdown(
    options=[''] + lista_categorias,
    description='Categorías:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='80%', margin='10px auto')
)
dropdown_categorias.layout.display = 'none'  # Ocultar inicialmente

def mostrar_ocultar_dropdown_categorias(change):
    with output_area:
        output_area.clear_output()
    if checkbox_categorias.value:
        dropdown_categorias.layout.display = 'block'
        # Desactivar otros widgets
        entrada_busqueda.value = ''
    else:
        dropdown_categorias.layout.display = 'none'
        entrada_busqueda.value = ''
        if checkbox_ordenar_novedad.value:
            actualizar_resultados(None)
        else:
            with output_area:
                output_area.clear_output()
                if super_buscador_img:
                    display(super_buscador_img)
                else:
                    print("Imagen del Super Buscador no disponible.")

checkbox_categorias.observe(mostrar_ocultar_dropdown_categorias, names='value')
dropdown_categorias.observe(actualizar_resultados, names='value')
checkbox_ordenar_novedad.observe(actualizar_resultados, names='value')

# Imagen del "Super Buscador" centrada
if os.path.exists(ruta_imagen_super_buscador):
    super_buscador_img = widgets.Image(
        value=open(ruta_imagen_super_buscador, 'rb').read(),
        format='png',
        layout=widgets.Layout(width='50%', margin='20px auto',
                              justify_content='center', display='flex', align_items='center')
    )
else:
    # Si la imagen no se encuentra, muestra un mensaje o una imagen alternativa
    super_buscador_img = widgets.HTML(value="<p style='text-align:center;'>Imagen del Super Buscador no encontrada.</p>")

# Crear un contenedor para los controles (Checkbox y Botón)
controles_hbox = widgets.HBox([
    checkbox_ubicacion,
    boton_descargar
], layout=widgets.Layout(justify_content='center', align_items='center', gap='20px'))

# Mostrar los widgets en la interfaz
display(entrada_busqueda, checkboxes_hbox, dropdown_categorias, output_area)

# Mostrar inicialmente la imagen del "Super Buscador"
with output_area:
    output_area.clear_output()
    if super_buscador_img:
        display(super_buscador_img)
    else:
        print("Imagen del Super Buscador no disponible.")